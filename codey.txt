Create "codey" From ScratchStep 1: Start Completely Fresh1. On your computer, delete your existing project folder (coding-coach-final). This is the most important step to guarantee there are no old, hidden, or conflicting files.2. Create a new, empty folder and name it codey.3. Open this empty codey folder in your code editor (like VS Code).Step 2: Create Every File and FolderFollow this guide precisely. I will provide the full and final code for every single file. Create each file in the specified location and paste the entire code block I provide into it.A. Files in the Main codey FolderCreate these files directly inside your codey folder.1. File: package.jsonGenerated json{  "name": "codey",  "private": true,  "version": "1.0.0",  "type": "module",  "scripts": {    "dev": "vite",    "build": "tsc && vite build",    "preview": "vite preview"  },  "dependencies": {    "firebase": "^10.12.3",    "react": "^18.3.1",    "react-dom": "^18.3.1"  },  "devDependencies": {    "@google/genai": "^0.14.0",    "@netlify/functions": "^2.7.0",    "@types/react": "^18.3.3",    "@types/react-dom": "^18.3.0",    "@vitejs/plugin-react": "^4.3.1",    "autoprefixer": "^10.4.19",    "postcss": "^8.4.39",    "tailwindcss": "^3.4.4",    "typescript": "^5.2.2",    "vite": "^5.3.1"  }}Use code with caution.Json2. File: vite.config.tsGenerated typescriptimport { defineConfig } from 'vite'import react from '@vitejs/plugin-react'// https://vitejs.dev/config/export default defineConfig({  plugins: [react()],  server: {    proxy: {      '/api': {        target: 'http://localhost:8888/.netlify/functions',        changeOrigin: true,        rewrite: (path) => path.replace(/^\/api/, ''),      },    },  },})Use code with caution.TypeScript3. File: netlify.tomlGenerated toml[build]  command = "npm run build"  functions = "netlify/functions"  publish = "dist"[functions]  node_bundler = "esbuild"Use code with caution.Toml4. File: tailwind.config.jsGenerated javascript/** @type {import('tailwindcss').Config} */export default {  content: [    "./index.html",    "./src/**/*.{js,ts,jsx,tsx}",  ],  theme: {    extend: {},  },  plugins: [],}Use code with caution.JavaScript5. File: postcss.config.jsGenerated javascriptexport default {  plugins: {    tailwindcss: {},    autoprefixer: {},  },}Use code with caution.JavaScript6. File: tsconfig.jsonGenerated json{  "compilerOptions": {    "target": "ES2020",    "useDefineForClassFields": true,    "lib": ["ES2020", "DOM", "DOM.Iterable"],    "module": "ESNext",    "skipLibCheck": true,    "moduleResolution": "bundler",    "allowImportingTsExtensions": true,    "resolveJsonModule": true,    "isolatedModules": true,    "noEmit": true,    "jsx": "react-jsx",    "strict": true,    "noUnusedLocals": true,    "noUnusedParameters": true,    "noFallthroughCasesInSwitch": true  },  "include": ["src", "netlify/functions"],  "references": [{ "path": "./tsconfig.node.json" }]}Use code with caution.Json7. File: tsconfig.node.jsonGenerated json{  "compilerOptions": {    "composite": true,    "skipLibCheck": true,    "module": "ESNext",    "moduleResolution": "bundler",    "allowSyntheticDefaultImports": true,    "strict": true  },  "include": ["vite.config.ts"]}Use code with caution.Json8. File: index.htmlGenerated html<!DOCTYPE html><html lang="en">  <head>    <meta charset="UTF-8" />    <meta name="viewport" content="width=device-width, initial-scale=1.0" />    <title>Codey - Your AI Coding Coach</title>  </head>  <body>    <div id="root"></div>    <script type="module" src="/src/main.tsx"></script>  </body></html>Use code with caution.HtmlB. The Secure Backend Function1. Inside codey, create a new folder named netlify.2. Inside netlify, create another folder named functions.3. Inside functions, create a new file named gemini.ts.File: netlify/functions/gemini.tsGenerated typescriptimport { GoogleGenAI, GenerateContentResponse } from "@google/genai";import type { Handler, HandlerEvent } from "@netlify/functions";interface RequestBody {  prompt: string;  systemInstruction: string;}const handler: Handler = async (event: HandlerEvent) => {  if (event.httpMethod !== 'POST') {    return { statusCode: 405, body: JSON.stringify({ error: 'Method Not Allowed' }) };  }  const apiKey = process.env.GEMINI_API_KEY;  if (!apiKey) {    return { statusCode: 500, body: JSON.stringify({ error: 'API key not configured' }) };  }    try {    const { prompt, systemInstruction } = JSON.parse(event.body || '{}') as RequestBody;        const ai = new GoogleGenAI({ apiKey });        const geminiResponse: GenerateContentResponse = await ai.models.generateContent({        model: "gemini-2.5-flash",        contents: prompt,        config: {            systemInstruction: systemInstruction,            temperature: 0.5,        }    });    return {      statusCode: 200,      headers: { 'Content-Type': 'application/json' },      body: JSON.stringify({ text: geminiResponse.text }),    };      } catch (error) {    console.error('Error calling Gemini API:', error);    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred";    return {      statusCode: 500,      body: JSON.stringify({ error: 'Failed to get response from Gemini.', details: errorMessage }),    };  }};export { handler };Use code with caution.TypeScriptC. The Frontend Application Code1. Inside codey, create a new folder named src.2. Create all the following files inside src and its subfolders.1. Main src FilesFile: src/main.tsxGenerated typescriptimport React from 'react';import ReactDOM from 'react-dom/client';import App from './App.tsx';import './index.css';ReactDOM.createRoot(document.getElementById('root')!).render(  <React.StrictMode>    <App />  </React.StrictMode>,)Use code with caution.TypeScriptFile: src/index.cssGenerated css@tailwind base;@tailwind components;@tailwind utilities;:root { /* Default/Playful theme colors */  --color-bg-primary-rgb: 30 41 59; /* slate-800 */  --color-bg-secondary-rgb: 15 23 42; /* slate-900 */  --color-bg-tertiary-rgb: 51 65 85; /* slate-700 */  --color-bg-tertiary-alpha-rgb: 51 65 85; /* slate-700 for alpha */  --color-bg-accent-rgb: 14 116 144; /* cyan-700 - for progress bar, level tag */  --color-bg-gradient-from-rgb: 15 23 42; /* slate-900 */  --color-bg-gradient-to-rgb: 30 41 59;   /* slate-800 */    --color-text-primary-rgb: 226 232 240; /* slate-100 */  --color-text-secondary-rgb: 148 163 184; /* slate-400 */  --color-text-tertiary-rgb: 203 213 225; /* slate-300 */  --color-text-accent-rgb: 125 211 252;  /* sky-300 */  --color-text-on-accent-rgb: 255 255 255; /* white */  --color-accent-primary-rgb: 56 189 248; /* sky-500 */  --color-accent-primary-hover-rgb: 3 105 161; /* sky-600 */  --color-accent-secondary-rgb: 20 184 166; /* teal-500 */  --color-accent-secondary-hover-rgb: 13 148 136; /* teal-600 */  --color-accent-tertiary-rgb: 245 158 11; /* amber-500 for general icon accents */  --color-accent-warning-rgb: 239 68 68; /* red-500 */  --color-accent-warning-bg-rgb: 239 68 68; /* red-500 with alpha */  --color-accent-success-rgb: 34 197 94; /* green-500 */  --color-border-primary-rgb: 71 85 105; /* slate-600 */  --color-border-accent-rgb: 56 189 248; /* sky-500 */    --color-header-gradient-from-rgb: 56 189 248; /* sky-400 */  --color-header-gradient-via-rgb: 34 211 238; /* cyan-400 */  --color-header-gradient-to-rgb: 20 184 166; /* teal-500 */  --color-icon-logo-rgb: 56 189 248; /* sky-500 */  --color-icon-lightbulb-rgb: 250 204 21; /* yellow-400 */  --color-icon-sparkles-rgb: 250 204 21; /* yellow-400 */  --color-icon-thumbsup-rgb: 192 132 252; /* purple-400 */  --color-icon-checkcircle-rgb: 255 255 255; /* white */  --font-family-sans: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";  --font-family-body: var(--font-family-sans);  --font-family-heading: var(--font-family-sans);}body.theme-graceful {  --color-bg-primary-rgb: 42 50 66;   --color-bg-secondary-rgb: 29 35 48;   --color-bg-tertiary-rgb: 58 68 86;  --color-bg-tertiary-alpha-rgb: 58 68 86;  --color-bg-accent-rgb: 60 100 150;   --color-bg-gradient-from-rgb: 29 35 48;  --color-bg-gradient-to-rgb: 42 50 66;    --color-text-primary-rgb: 230 235 240;   --color-text-secondary-rgb: 170 180 190;   --color-text-tertiary-rgb: 200 210 220;  --color-text-accent-rgb: 130 170 220;    --color-text-on-accent-rgb: 240 245 255;  --color-accent-primary-rgb: 79 138 209;   --color-accent-primary-hover-rgb: 60 115 180;  --color-accent-secondary-rgb: 67 149 157;   --color-accent-secondary-hover-rgb: 50 120 130;  --color-accent-tertiary-rgb: 210 160 50;  --color-accent-warning-rgb: 220 70 70;   --color-accent-warning-bg-rgb: 220 70 70;  --color-accent-success-rgb: 60 180 100;  --color-border-primary-rgb: 80 90 110;  --color-border-accent-rgb: 79 138 209;    --color-header-gradient-from-rgb: 79 138 209;  --color-header-gradient-via-rgb: 67 149 157;  --color-header-gradient-to-rgb: 80 160 170;  --color-icon-logo-rgb: 79 138 209;  --color-icon-lightbulb-rgb: 210 180 70;   --color-icon-sparkles-rgb: 210 180 70;  --color-icon-thumbsup-rgb: 170 140 230;  --color-icon-checkcircle-rgb: 240 245 255;}body {  background-color: rgb(var(--color-bg-secondary-rgb)); /* Base background */  font-family: var(--font-family-body);  color: rgb(var(--color-text-primary-rgb));}.selection\\:bg-accent-primary selection::backdrop {  background-color: rgb(var(--color-accent-primary-rgb));  color: rgb(var(--color-text-on-accent-rgb));}/* Styles from WelcomeAnimation.tsx */.robot-group { transition: opacity 0.5s ease-in-out, transform 0.3s ease-out; opacity: 0; }.robot-group.visible { opacity: 1; }.robot-arm-right.wave {  animation: robot-wave 0.7s ease-in-out 1;  transform-origin: 8px 5px; /* Adjust based on arm position in SVG */}@keyframes robot-wave {  0%, 100% { transform: rotate(0deg); }  50% { transform: rotate(45deg); }}.robot-main.jump {  animation: robot-jump 0.4s ease-out 1;}@keyframes robot-jump {  0%, 100% { transform: translateY(0); }  50% { transform: translateY(-15px); }}.instruction-text, .speech-bubble-group {  opacity: 0;  transition: opacity 0.5s ease-in-out;  font-family: 'monospace', 'ui-monospace', 'SFMono-Regular', Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;}.instruction-text.visible, .speech-bubble-group.visible {  opacity: 1;}.speech-bubble-text {  font-family: var(--font-family-body); /* Use theme font */}/* For Notification Popups */@keyframes keyframes-fade-in-up {  from {    opacity: 0;    transform: translateY(10px);  }  to {    opacity: 1;    transform: translateY(0);  }}.animate-fade-in-up {  animation: keyframes-fade-in-up 0.5s ease-out forwards;}Use code with caution.CssFile: src/App.tsxGenerated typescriptimport React, { useState, useEffect, useCallback } from 'react';import { ConceptDisplay } from './components/ConceptDisplay';import { CodeInput } from './components/CodeInput';import { FeedbackDisplay } from './components/FeedbackDisplay';import { LevelNavigator } from './components/LevelNavigator';import { Header } from './components/Header';import { WelcomeModal } from './components/WelcomeModal';import { CourseOutlineModal } from './components/CourseOutlineModal';import { SettingsModal } from './components/SettingsModal';import { AdminDashboard } from './components/AdminDashboard';import { LoadingSpinner } from './components/LoadingSpinner';import { CODING_LEARNING_PATH, MEDTECH_LEARNING_PATH, SWE_LEARNING_PATH, BADGES_CONFIG } from './constants';import type { LearningStep, UserPersona, Theme, GameProgress, CourseMode, AuthUser } from './types';import { explainConcept, evaluateCode } from './services/geminiService';import { authService } from './services/authService';import { dbService } from './services/dbService';import * as Icons from './components/icons';interface AppNotification {  id: string;  type: 'block' | 'points' | 'badge';  message: string;  iconName?: keyof typeof Icons;}type ViewMode = 'loading' | 'welcome' | 'app' | 'admin';const App: React.FC = () => {  const [viewMode, setViewMode] = useState<ViewMode>('loading');  const [authUser, setAuthUser] = useState<AuthUser | null>(null);  const [progress, setProgress] = useState<GameProgress | null>(null);  const [userCode, setUserCode] = useState<string>('');  const [coachFeedback, setCoachFeedback] = useState<string>('');  const [conceptExplanation, setConceptExplanation] = useState<string>('');  const [isExplanationLoading, setIsExplanationLoading] = useState<boolean>(false);  const [isFeedbackLoading, setIsFeedbackLoading] = useState<boolean>(false);  const [error, setError] = useState<string | null>(null);  const [notifications, setNotifications] = useState<AppNotification[]>([]);  const [showCourseOutline, setShowCourseOutline] = useState<boolean>(false);  const [showSettingsModal, setShowSettingsModal] = useState<boolean>(false);    const learningPath = progress?.userPersona === 'doctor'     ? MEDTECH_LEARNING_PATH     : progress?.courseMode === 'swe'    ? SWE_LEARNING_PATH    : CODING_LEARNING_PATH;  const currentStep = progress ? learningPath[progress.currentLevelIndex] : null;  const isChallengeCompleted = (progress && currentStep) ? progress.completedSteps[currentStep.id] || false : false;  useEffect(() => {    setViewMode('loading');    const unsubscribe = authService.onAuthStateChanged(async (user) => {      if (user) {        setAuthUser(user);        const userProgress = await dbService.getUserProgress(user.uid);        if (userProgress) {          setProgress(userProgress);          setViewMode('app');        } else {          setProgress(null);          setViewMode('welcome');        }      } else {        setAuthUser(null);        setProgress(null);        setViewMode('welcome');      }    });    return () => unsubscribe();  }, []);  useEffect(() => {    if (authUser && progress) {      dbService.saveUserProgress(authUser.uid, progress);    }  }, [progress, authUser]);    useEffect(() => {    document.body.className = `theme-${progress?.theme || 'playful'}`;  }, [progress?.theme]);  const updateProgress = useCallback((updates: Partial<GameProgress>) => {    setProgress(prev => prev ? { ...prev, ...updates } : null);  }, []);  const addNotification = useCallback((notification: Omit<AppNotification, 'id'>) => {    const newNotification = { ...notification, id: Date.now().toString() };    setNotifications(prev => [newNotification, ...prev]);    setTimeout(() => {      setNotifications(prev => prev.filter(n => n.id !== newNotification.id));    }, 5000);  }, []);  const handleLevelChange = useCallback(async (levelIndex: number) => {    if (!progress || !progress.userPersona || !progress.courseMode) return;    const step = learningPath[levelIndex];    if (!step) return;    setIsExplanationLoading(true);    setError(null);    setCoachFeedback('');    setUserCode('');        try {      const explanation = await explainConcept(progress, step.introductionPrompt, step.blockType);      setConceptExplanation(explanation);    } catch (e) {      const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';      setError(errorMessage);      setConceptExplanation(`Failed to load concept: ${errorMessage}`);    } finally {      setIsExplanationLoading(false);    }  }, [progress, learningPath]);  useEffect(() => {    if (viewMode === 'app' && progress) {      handleLevelChange(progress.currentLevelIndex);    }  }, [progress?.currentLevelIndex, viewMode, handleLevelChange]);  const handleOnboardingComplete = (    persona: UserPersona,    mode: CourseMode,    profession?: string  ) => {    if (!authUser) return;        const newTheme: Theme = persona === 'kid' ? 'playful' : 'graceful';    const initialProgress: GameProgress = {        userPersona: persona,        courseMode: mode,        userProfession: profession || null,        theme: newTheme,        currentLevelIndex: 0,        totalPoints: 0,        achievedBadgeIds: [],        completedSteps: {},    };    setProgress(initialProgress);    setViewMode('app');  };    const handleCodeSubmit = async () => {    if (!progress || !currentStep || !progress.userPersona || !progress.courseMode) return;        setIsFeedbackLoading(true);    setError(null);    try {      const feedback = await evaluateCode(progress, currentStep, userCode);      setCoachFeedback(feedback);      const successKeywords = ['correct', 'excellent', 'well done', 'exactly', 'perfect', 'great job', 'nice work', 'insightful'];      if (!isChallengeCompleted && successKeywords.some(keyword => feedback.toLowerCase().includes(keyword))) {        const pointsToAdd = currentStep.points || 10;        const newTotalPoints = progress.totalPoints + pointsToAdd;        const newCompletedSteps = { ...progress.completedSteps, [currentStep.id]: true };        const newBadges = BADGES_CONFIG.filter(badge =>           !progress.achievedBadgeIds.includes(badge.id) && badge.condition(learningPath, progress.currentLevelIndex, currentStep, newTotalPoints, progress.achievedBadgeIds)        );        const newBadgeIds = newBadges.map(b => b.id);                updateProgress({             totalPoints: newTotalPoints,             completedSteps: newCompletedSteps,            achievedBadgeIds: [...progress.achievedBadgeIds, ...newBadgeIds]        });        addNotification({ type: 'points', message: `+${pointsToAdd} Points!`, iconName: 'StarIcon' });        newBadges.forEach(badge => {            addNotification({ type: 'badge', message: `Badge Unlocked: ${badge.name}`, iconName: badge.iconName });        });      }    } catch (e) {      const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';      setError(errorMessage);      setCoachFeedback(`Failed to get feedback: ${errorMessage}`);    } finally {      setIsFeedbackLoading(false);    }  };    const handleNextLevel = () => {    if (progress && progress.currentLevelIndex < learningPath.length - 1) {      updateProgress({ currentLevelIndex: progress.currentLevelIndex + 1 });    }  };  const handlePreviousLevel = () => {    if (progress && progress.currentLevelIndex > 0) {      updateProgress({ currentLevelIndex: progress.currentLevelIndex - 1 });    }  };    const handleNavigateToLevel = (index: number) => {    updateProgress({ currentLevelIndex: index });    setShowCourseOutline(false);  }  const handleLogout = async () => {    await authService.signOut();  };    const renderContent = () => {    switch (viewMode) {        case 'loading':            return <div className="flex items-center justify-center min-h-screen"><LoadingSpinner size="lg" /></div>;        case 'welcome':            return <WelcomeModal onOnboardingComplete={handleOnboardingComplete} authUser={authUser} />;        case 'admin':            return <AdminDashboard onExit={() => setViewMode('app')} />;        case 'app':            if (!progress || !currentStep || !authUser) {                return <div className="flex items-center justify-center min-h-screen"><LoadingSpinner size="lg" /><p className="ml-4">Loading your learning path...</p></div>;            }            return (              <div className={`min-h-screen bg-gradient-to-b from-[rgb(var(--color-bg-gradient-from-rgb))] to-[rgb(var(--color-bg-gradient-to-rgb))] flex flex-col items-center p-4 font-sans selection:bg-[rgb(var(--color-accent-primary))] selection:text-[rgb(var(--color-text-on-accent-rgb))]`}>                                {showCourseOutline && (                  <CourseOutlineModal isOpen={showCourseOutline} onClose={() => setShowCourseOutline(false)} learningPath={learningPath} currentLevelIndex={progress.currentLevelIndex} onNavigateToLevel={handleNavigateToLevel} persona={progress.userPersona!} theme={progress.theme} achievedBadgeIds={progress.achievedBadgeIds} totalPoints={progress.totalPoints}/>                )}                          {showSettingsModal && (                  <SettingsModal isOpen={showSettingsModal} onClose={() => setShowSettingsModal(false)} onLogout={handleLogout}/>                )}                          <Header onOpenCourseOutline={() => setShowCourseOutline(true)} onOpenSettings={() => setShowSettingsModal(true)} persona={progress.userPersona} userName={authUser.name} totalPoints={progress.totalPoints}/>                          <main className="w-full max-w-4xl grid grid-cols-1 lg:grid-cols-2 gap-8">                  <div className="flex flex-col space-y-6">                    <ConceptDisplay explanation={conceptExplanation} isLoading={isExplanationLoading} icon={<Icons.LightBulbIcon className="w-6 h-6" />} isWelcomeStep={currentStep.id.includes('welcome')} persona={progress.userPersona}/>                    <CodeInput code={userCode} setCode={setUserCode} onSubmit={handleCodeSubmit} isLoading={isFeedbackLoading} placeholder={currentStep.placeholder} persona={progress.userPersona}/>                  </div>                            <div className="flex flex-col space-y-6">                     <div className="flex items-center text-lg font-semibold text-[rgb(var(--color-icon-thumbsup-rgb))]"><Icons.ThumbsUpIcon className="w-6 h-6 mr-2 flex-shrink-0" /><h3>Coach's Feedback</h3></div>                    <FeedbackDisplay feedback={coachFeedback} isLoading={isFeedbackLoading} persona={progress.userPersona}/>                     {error && ( <div className="bg-[rgba(var(--color-accent-warning-bg-rgb),0.2)] text-[rgb(var(--color-accent-warning-rgb))] border border-[rgb(var(--color-accent-warning-rgb))] p-3 rounded-md text-sm"><strong>Error:</strong> {error}</div> )}                  </div>                </main>                          <LevelNavigator onPrevious={handlePreviousLevel} onNext={handleNextLevel} canGoPrevious={progress.currentLevelIndex > 0} canGoNext={progress.currentLevelIndex < learningPath.length - 1} isNextDisabled={!isChallengeCompleted} persona={progress.userPersona}/>                          <div className="fixed bottom-4 right-4 flex flex-col-reverse space-y-2 space-y-reverse z-50">                  {notifications.map(notif => {                    const IconComponent = notif.iconName ? Icons[notif.iconName] : Icons.SparklesIcon;                    return (                      <div key={notif.id} className="animate-fade-in-up bg-[rgb(var(--color-bg-tertiary-rgb))] text-[rgb(var(--color-text-primary-rgb))] py-2 px-4 rounded-lg shadow-lg flex items-center border border-[rgb(var(--color-border-primary-rgb))]"><IconComponent className="w-5 h-5 mr-2 text-[rgb(var(--color-accent-tertiary-rgb))]" />{notif.message}</div>                    );                  })}                </div>                          <footer className="text-center mt-auto pt-8 text-xs text-[rgb(var(--color-text-secondary-rgb))]">                  {authUser?.isAdmin && ( <button onClick={() => setViewMode('admin')} className="hover:underline mb-2">Admin Dashboard</button> )}                  <p>Logged in as {authUser?.email}</p>                </footer>              </div>            );    }  };  return <>{renderContent()}</>;};export default App;Use code with caution.TypeScriptFile: src/constants.tsGenerated typescriptimport type { LearningStep, Badge } from './types';import * as Icons from './components/icons'; // Used for badge iconName type safety// --- Analogy Maps ---// 1. For Healthcare Professionalsexport const medicalAnalogyMap: Record<string, string> = {  // OS and System Level  'Operating System': 'The human nervous system - manages all basic functions and communication between components',  'Kernel': 'The brain stem - handles core system operations and resource allocation',  'Process': 'A medical procedure - has a defined start, execution, and end state',  'Thread': 'A medical specialist - works within a process to perform specific tasks',    // Hardware  'CPU': 'The heart - processes instructions and keeps the system running',  'RAM': 'Short-term memory - holds currently active information',  'Hard Drive': 'Long-term memory - stores information for later use',    // Networking  'API': 'The nervous system for applications - allows different parts to communicate',  'Firewall': 'The immune system - protects against harmful external elements',    // Software Concepts  'Database': 'A patient medical records system - stores and retrieves patient information',    // Development Concepts  'Debugging': 'Medical diagnosis - identifying and fixing issues in a system',  'Microservices': 'Specialized hospital departments (Cardiology, Oncology) - each handles specific functions independently',  // Data Concepts  'Machine Learning': 'AI-assisted medical diagnosis - identifies patterns in data to predict outcomes',};// 2. For General Adult Beginners (Software Engineering Concepts)export const sweAnalogyMap: Record<string, string> = {  'Operating System': 'A city\'s government - manages all public services and resources',  'Kernel': 'The mayor\'s office - handles the most critical city-wide decisions',  'Process': 'A construction project - has a clear plan, resources, and a final goal',  'Thread': 'A specialized construction crew (plumbers, electricians) - performs one job within the project',    'CPU': 'The main power plant - provides the energy for the entire city to function',  'RAM': 'A workshop\'s workbench - holds the tools and materials for the job you are currently doing',  'Hard Drive': 'The city\'s main library or archive - stores all information for long-term access',    'API': 'A restaurant menu - provides a clear list of what you can order and how, without needing to know the kitchen\'s recipes',  'Firewall': 'A building\'s security guard and ID checkpoint - inspects everyone and everything coming in or out',    'Database': 'A meticulously organized warehouse - stores vast amounts of items in a structured way for quick retrieval',  'Debugging': 'Being a detective - finding clues (bugs) to solve a mystery (the problem)',  'Microservices': 'A food court with different stalls (Tacos, Pizza, Sushi) - each operates independently but serves a common goal',  'Machine Learning': 'Teaching a new employee by showing them thousands of past examples of a task until they can do it on their own',};// --- Learning Paths ---// 1. CODING Learning Path (For Kids and Adult Beginners choosing 'coding')export const CODING_LEARNING_PATH: LearningStep[] = [    {    id: 'welcome',    title: 'Welcome to Coding!',    emoji: '??',    blockType: 'Introduction',    introductionPrompt: `You are a friendly and encouraging AI coding coach. Your audience is a complete beginner.1.  Welcome them warmly to the world of coding.2.  Explain that coding is like giving instructions to a computer. Use a simple, fun analogy (e.g., teaching a robot, writing a recipe for a cake).3.  Reassure them that it's okay to not know anything yet and that you'll guide them step-by-step.4.  Briefly mention they'll learn about giving commands, storing information, and making decisions in code.5.  End with an exciting call to action like, "Ready to write your first instruction?"`,    challengeDescription: "For your first task, just tell me what you'd like to learn about coding, or simply say 'hello' to get started!",    codeEvaluationPromptPreamble: "The user is introducing themselves. Respond with a very friendly and encouraging message. Welcome them by name if they provide it. Keep it short and sweet, then tell them to press 'Next' to see their first real concept.",    placeholder: "Type 'hello' or what you're excited to learn!",    estimatedTimeMinutes: 5,    points: 5,  },  {    id: 'variables',    title: 'Storing Information',    emoji: '??',    blockType: 'Variables',    introductionPrompt: "Explain what a 'variable' is in programming. Use the analogy of a labeled box or container where you can store information (like numbers, text, or true/false values). Emphasize that you give the box a name (the variable name) so you can easily find and use what's inside later.",    challengeDescription: "Imagine you have a box named 'score' and you want to put the number 100 inside it. How would you write that as a simple instruction?",    codeEvaluationPromptPreamble: "The user is being asked to declare a variable. They should write something like 'score = 100' or 'let score = 100'. Evaluate if their answer correctly assigns the value 100 to a variable named score.",    placeholder: "score = 100",    estimatedTimeMinutes: 10,    points: 10,  },   {    id: 'conditionals',    title: 'Making Decisions',    emoji: '??',    blockType: 'If/Else Statements',    introductionPrompt: "Explain 'if/else' conditional statements. Use the analogy of making a decision based on a condition. For example: 'IF it is raining, THEN I will take an umbrella, ELSE I will wear sunglasses.' Show how this allows a program to react differently to different situations.",    challengeDescription: "Write a simple 'if' statement to check if a 'health' variable is less than 10. If it is, the instruction should be to 'use a potion'.",    codeEvaluationPromptPreamble: "The user needs to write a simple conditional. They should write something like 'if health < 10 then use potion'. Check if they have the core components: an 'if', a condition (health < 10), and an action.",    placeholder: "if health < 10 then...",    estimatedTimeMinutes: 15,    points: 15,  },];// 2. MEDTECH Learning Path (For Healthcare Professionals)export const MEDTECH_LEARNING_PATH: LearningStep[] = [  {    id: 'med_welcome',    title: 'Technology in Medicine',    emoji: '??',    blockType: 'Introduction to MedTech Concepts',    introductionPrompt: `You are an expert in medical technology, welcoming a fellow medical professional to a course on core tech concepts.Your goal is to bridge the gap between medicine and technology, emphasizing why this knowledge is crucial in modern healthcare.1.  Acknowledge their background: Start by welcoming them and stating that their clinical expertise is the perfect foundation for understanding these concepts.2.  Introduce the "Why": Explain that technology is deeply integrated into medicine, from EHRs to diagnostic imaging. Understanding the principles behind these tools can enhance their use and improve communication with IT staff.3.  Explain the Analogy-Based Approach: State that this course uses medical analogies to make technical topics intuitive. For example, "We'll see how a computer's CPU is like the 'heart' of the system."4.  End with Encouragement: Reassure them that the goal is conceptual understanding, not becoming a coder. End with an encouraging message like, "Let's begin our first consultation."`,    challengeDescription: "To begin, what is one piece of technology you use in your daily practice that you'd like to understand better? (e.g., EHR, PACs, Telehealth platform).",    codeEvaluationPromptPreamble: "The user, a medical professional, has shared a piece of technology they use. Acknowledge their input warmly and express excitement for the journey. Say something like: 'Excellent. That's a perfect example of the systems we'll be demystifying. Let's pull up the first chart.'",    placeholder: "e.g., Our hospital's EHR system",    estimatedTimeMinutes: 5,    points: 5,  },  {    id: 'med_cpu_ram',    title: 'System Anatomy',    emoji: '??',    blockType: 'CPU & RAM',    introductionPrompt: "Explain the concepts of 'CPU' and 'RAM' using their medical analogies from the map. Describe the CPU as the 'heart' and RAM as the 'short-term memory'. Contrast RAM with a Hard Drive ('long-term memory').",    challengeDescription: "Based on the analogies, if a hospital's computer is slow while actively looking up multiple patient records for a complex case, which component is the likely bottleneck: the 'heart' (CPU) or the 'short-term memory' (RAM)? Explain why.",    codeEvaluationPromptPreamble: "The user is diagnosing a slow system. The correct answer is RAM ('short-term memory') because it's responsible for holding active information. Evaluate their reasoning.",    placeholder: "The bottleneck is likely the... because...",    estimatedTimeMinutes: 10,    points: 10,  },  {    id: 'med_api',    title: 'System Communication',    emoji: '??',    blockType: 'API',    introductionPrompt: "Explain the concept of an 'API' using its analogy. Describe it as the 'nervous system for applications,' allowing different systems (like the EHR and the pharmacy's inventory system) to communicate.",    challengeDescription: "A doctor orders a prescription from the EHR. The system immediately confirms if the medication is in stock at the pharmacy. Describe the role of the 'API' in this interaction. What 'message' does the EHR send?",    codeEvaluationPromptPreamble: "The user is explaining the role of an API. They should describe a 'request' from the EHR (e.g., 'Do you have Medication X?') and a 'response' from the pharmacy system via the API (e.g., 'Yes, 50 units available').",    placeholder: "The EHR sends a request to...",    estimatedTimeMinutes: 10,    points: 10,  },];// 3. SWE Learning Path (For General Adult Beginners)export const SWE_LEARNING_PATH: LearningStep[] = [   {    id: 'swe_welcome',    title: 'How Software is Built',    emoji: '???',    blockType: 'Intro to SWE Concepts',    introductionPrompt: `You are a helpful and clear guide for an intelligent adult who is new to software concepts.1. Welcome them and explain that understanding software architecture is like understanding the blueprint of a building, even if you don't lay the bricks yourself.2. Explain this track focuses on the "what" and "why" of technology, not the "how" of coding syntax.3. State that you'll use real-world analogies (like city planning or running a business) to make concepts clear.4. End with an encouraging start: "Let's get started by looking at the foundational blueprint of any computer system."`,    challengeDescription: "To start, think about your favorite app or website. What do you think are the main 'parts' that make it work? (e.g., user login, showing pictures, etc.). There's no wrong answer!",    codeEvaluationPromptPreamble: "The user has shared their thoughts on how an app works. Acknowledge their intuition and tell them it's a great starting point for thinking about architecture. Say something like 'That's a perfect way to start thinking about components. Now, let's look at the official blueprints.'",    placeholder: "I think Instagram's main parts are...",    estimatedTimeMinutes: 5,    points: 5,  },  {    id: 'swe_cpu_ram',    title: 'System Architecture',    emoji: '???',    blockType: 'CPU & RAM',    introductionPrompt: "Explain 'CPU' and 'RAM'. Use their general analogies from the map. Describe the CPU as the 'power plant' for the city, and RAM as the 'workbench' for current jobs. Contrast RAM with a Hard Drive ('the library').",    challengeDescription: "If a graphic designer's computer slows down when they have many large design files open at once, which component is the likely bottleneck: the 'power plant' (CPU) or the 'workbench' (RAM)? Explain your reasoning.",    codeEvaluationPromptPreamble: "The user is diagnosing a slow computer. The correct answer is RAM ('workbench') because it holds all the actively used files. Evaluate their reasoning.",    placeholder: "The bottleneck is probably the... because...",    estimatedTimeMinutes: 10,    points: 10,  },  {    id: 'swe_api',    title: 'How Systems Talk',    emoji: '??',    blockType: 'API',    introductionPrompt: "Explain 'API'. Use the 'restaurant menu' analogy. You, the customer, don't need to know the kitchen's secrets; you just need the menu (the API) to make a request. The waiter handles the rest. This is how different software components interact without exposing their internal complexity.",    challengeDescription: "When you use a weather app on your phone, it shows you data from a national weather service. How does the 'restaurant menu' (API) analogy apply here? What 'order' is your app placing?",    codeEvaluationPromptPreamble: "The user should apply the API analogy. The phone app (customer) uses the weather service's API (menu) to place an order ('What's the weather for New York?'). The service returns the data. Evaluate their explanation.",    placeholder: "The app places an 'order' for...",    estimatedTimeMinutes: 10,    points: 10,  },];// --- Unified Badge Configuration ---export const BADGES_CONFIG: Badge[] = [  // Generic Badges  {    id: 'welcome_aboard',    name: 'Journey Started',    description: 'You\'ve taken the first step on your learning path!',    iconName: 'SparklesIcon',    condition: (_, _currentIndex, completedStep) => completedStep.id.includes('welcome'),  },  // Coding Path Badges  {    id: 'boxer',    name: 'Boxer',    description: 'Mastered the art of storing information in variables.',    iconName: 'BrainIcon',    condition: (_, _currentIndex, completedStep) => completedStep.id === 'variables',  },  {    id: 'decision_maker',    name: 'Decision Maker',    description: 'Understood how to control the flow of a program with conditionals.',    iconName: 'MedalIcon',    condition: (_, _currentIndex, completedStep) => completedStep.id === 'conditionals',  },    // MedTech / SWE Path Badges  {    id: 'systems_anatomist',    name: 'Systems Anatomist',    description: 'Mastered the core hardware components of a system.',    iconName: 'BrainIcon',    condition: (_, _currentIndex, completedStep) => completedStep.id.includes('_cpu_ram'),  },  {    id: 'network_navigator',    name: 'Network Navigator',    description: 'Understood how systems communicate via APIs.',    iconName: 'MedalIcon',    condition: (_, _currentIndex, completedStep) => completedStep.id.includes('_api'),  },  // Completion Badges  {    id: 'path_complete',    name: 'Path Complete!',    description: 'You have completed all available concepts in this track!',    iconName: 'TrophyIcon',    condition: (path, currentIndex) => currentIndex === path.length - 1,  },];Use code with caution.TypeScriptFile: src/types.tsGenerated typescriptexport type UserPersona = 'kid' | 'adult' | 'doctor';export type Theme = 'playful' | 'graceful';export type CourseMode = 'coding' | 'swe'; // 'coding' for syntax, 'swe' for concepts// Represents a user authenticated via a third-party serviceexport interface AuthUser {  uid: string;  name: string;  email: string;  isAdmin?: boolean;}export interface LearningStep {  id: string;  title: string;  emoji: string;  blockType?: string; // The "Concept" name, e.g., 'API', 'CPU'  introductionPrompt: string; // Base prompt  challengeDescription: string;  codeEvaluationPromptPreamble: string;  placeholder?: string;  estimatedTimeMinutes: number; // Estimated time in minutes to complete this step  points: number; // Points awarded for completing this step}export interface Badge {  id:string;  name: string;  description: string;  iconName: keyof typeof import('./components/icons'); // References icon component names  condition: (learningPath: LearningStep[], currentLevelIndex: number, completedStep: LearningStep, totalPoints: number, achievedBadgeIds: string[]) => boolean;}// Represents the structure of what's stored in localStorage/databaseexport interface GameProgress {  // User profile info - set once  userPersona: UserPersona | null;  courseMode: CourseMode | null;   userProfession: string | null; // e.g. "Cardiology" for doctors    // Dynamic progress  currentLevelIndex: number;  totalPoints: number;  achievedBadgeIds: string[];  completedSteps: Record<string, boolean>; // Tracks completion of steps by ID  // User-configurable settings  theme: Theme;}// Data structure for the admin dashboardexport interface AdminAnalyticsData {  totalUsers: number;  avgPoints: number;  personaDistribution: { persona: string; count: number }[];  coursePopularity: { course: string; count: number }[];  totalConceptsCompleted: number;}Use code with caution.TypeScriptFile: src/firebaseConfig.tsGenerated typescriptimport { initializeApp } from "firebase/app";import { getAuth } from "firebase/auth";import { getFirestore } from "firebase/firestore";// Your web app's Firebase configurationexport const firebaseConfig = {  apiKey: "AIzaSyCMdhoXzLSZSY7MEavFaBCWOwgqWTZ3vjA",  authDomain: "codey-1f630.firebaseapp.com",  projectId: "codey-1f630",  storageBucket: "codey-1f630.firebasestorage.app",  messagingSenderId: "1025550266658",  appId: "1:1025550266658:web:5c6ea4805b00347e82b57b",  measurementId: "G-0549XV89L7"};// Initialize Firebaseconst app = initializeApp(firebaseConfig);// Initialize and export Firebase servicesexport const auth = getAuth(app);export const db = getFirestore(app);Use code with caution.TypeScriptFile: src/WelcomeAnimation.tsxGenerated typescriptimport React, { useEffect, useState } from 'react';export const WelcomeAnimation: React.FC = () => {  const [step, setStep] = useState(0);  useEffect(() => {    const timeouts: ReturnType<typeof setTimeout>[] = [];    timeouts.push(setTimeout(() => setStep(1), 200)); // Robot appears    timeouts.push(setTimeout(() => setStep(2), 1200)); // Command 1 appears    timeouts.push(setTimeout(() => setStep(3), 1700)); // Robot waves    timeouts.push(setTimeout(() => setStep(4), 3000)); // Command 2 appears    timeouts.push(setTimeout(() => setStep(5), 3500)); // Robot jumps    timeouts.push(setTimeout(() => setStep(6), 4800)); // Command 3 appears    timeouts.push(setTimeout(() => setStep(7), 5300)); // Robot speaks    return () => {      timeouts.forEach(clearTimeout);    };  }, []);  return (    <div className="mb-6 p-4 bg-[rgba(var(--color-bg-tertiary-alpha-rgb),0.5)] rounded-lg flex flex-col items-center overflow-hidden">      <svg viewBox="0 0 250 160" className="w-full max-w-xs h-auto">        {/* Robot - using some fixed colors for robot parts for consistency, accents can be themed */}        <g id="robot" className={`robot-group ${step >= 1 ? 'visible' : ''}`}>          <g className={`robot-main ${step === 5 ? 'jump' : ''}`}>            {/* Legs */}            <rect x="78" y="110" width="12" height="20" fill="#64748B" rx="3" /> {/* Slate 500 */}            <rect x="100" y="110" width="12" height="20" fill="#64748B" rx="3" />            {/* Body */}            <rect x="70" y="60" width="50" height="55" fill="rgb(var(--color-accent-primary-rgb))" rx="5" /> {/* Themed accent color */}            {/* Head */}            <rect x="75" y="30" width="40" height="35" fill="rgba(var(--color-accent-primary-rgb), 0.7)" rx="5"/> {/* Lighter Themed accent */}            {/* Eyes */}            <circle cx="87" cy="47" r="4" fill="#0F172A" /> {/* Slate 900 - dark */}            <circle cx="103" cy="47" r="4" fill="#0F172A" />             {/* Antenna */}            <line x1="95" y1="30" x2="95" y2="20" stroke="#94A3B8" strokeWidth="2" /> {/* Slate 400 */}            <circle cx="95" cy="18" r="3" fill="rgb(var(--color-accent-warning-rgb))" /> {/* Themed warning/signal color */}          </g>          {/* Arms */}          <rect x="55" y="70" width="12" height="35" fill="rgba(var(--color-accent-primary-rgb), 0.7)" rx="3" /> {/* Lighter Themed accent */}          <rect             id="robot-arm-right"             className={step === 3 ? 'robot-arm-right wave' : 'robot-arm-right'}            x="123" y="70" width="12" height="35" fill="rgba(var(--color-accent-primary-rgb), 0.7)" rx="3"             style={{ transformOrigin: '6px 6px' }}           />        </g>        {/* Instructions - using a greenish color for contrast, could be themed too */}        <text x="15" y="30" fill="rgb(var(--color-accent-success-rgb))" opacity="0.8" fontSize="10" className={`instruction-text ${step >= 2 ? 'visible' : ''}`}>          command: WAVE_HELLO        </text>        <text x="15" y="75" fill="rgb(var(--color-accent-success-rgb))" opacity="0.8" fontSize="10" className={`instruction-text ${step >= 4 ? 'visible' : ''}`}>          command: JUMP_FOR_JOY        </text>        <text x="15" y="120" fill="rgb(var(--color-accent-success-rgb))" opacity="0.8" fontSize="10" className={`instruction-text ${step >= 6 ? 'visible' : ''}`}>          command: SAY "Coding is fun!"        </text>        {/* Speech Bubble from Robot */}        <g           id="robot-speech-bubble"           className={`speech-bubble-group ${step >= 7 ? 'visible' : ''}`}          transform="translate(140, 35)"        >          <path             d="M0 15C0 6.71573 6.71573 0 15 0H75C83.2843 0 90 6.71573 90 15V30C90 38.2843 83.2843 45 75 45H60L50 55V45H15C6.71573 45 0 38.2843 0 30V15Z"             fill="rgb(var(--color-bg-primary-rgb))" /* Themed background for bubble */            stroke="rgb(var(--color-text-accent-rgb))" /* Themed border for bubble */            strokeWidth="0.5"          />          <text x="45" y="22" textAnchor="middle" fontSize="9" fill="rgb(var(--color-text-accent-rgb))" className="speech-bubble-text">Coding</text>          <text x="45" y="34" textAnchor="middle" fontSize="9" fill="rgb(var(--color-text-accent-rgb))" className="speech-bubble-text">is fun!</text>        </g>      </svg>      <p className="text-sm text-[rgb(var(--color-text-secondary-rgb))] mt-2">Coding is like giving instructions to a friendly robot!</p>    </div>  );};Use code with caution.TypeScriptD. Files in the src/components Folder1. File: src/components/AdminDashboard.tsxGenerated typescriptimport React, { useState, useEffect } from 'react';import type { AdminAnalyticsData } from '../types';import { dbService } from '../services/dbService';import { LoadingSpinner } from './LoadingSpinner';import * as Icons from './icons';interface AdminDashboardProps {  onExit: () => void;}const StatCard: React.FC<{ title: string; value: string | number; icon: React.ReactNode }> = ({ title, value, icon }) => (  <div className="bg-[rgba(var(--color-bg-tertiary-alpha-rgb),0.5)] p-4 rounded-lg flex items-center">    <div className="p-3 rounded-full bg-[rgba(var(--color-accent-primary-rgb),0.2)] mr-4">      {icon}    </div>    <div>      <p className="text-sm text-[rgb(var(--color-text-secondary-rgb))]">{title}</p>      <p className="text-2xl font-bold text-[rgb(var(--color-text-primary-rgb))]">{value}</p>    </div>  </div>);const BarChart: React.FC<{ title: string; data: { label: string; value: number }[] }> = ({ title, data }) => {  const maxValue = Math.max(...data.map(d => d.value), 0);  return (    <div className="bg-[rgba(var(--color-bg-tertiary-alpha-rgb),0.5)] p-4 rounded-lg">      <h3 className="font-semibold text-[rgb(var(--color-text-accent-rgb))] mb-4">{title}</h3>      <div className="space-y-3">        {data.map(({ label, value }) => (          <div key={label} className="flex items-center">            <p className="w-1/3 text-sm text-[rgb(var(--color-text-tertiary-rgb))] truncate pr-2">{label}</p>            <div className="w-2/3 bg-[rgb(var(--color-bg-secondary-rgb))] rounded-full h-5">              <div                className="bg-[rgb(var(--color-accent-secondary-rgb))] h-5 rounded-full flex items-center justify-end pr-2 text-xs text-white font-medium"                style={{ width: `${maxValue > 0 ? (value / maxValue) * 100 : 0}%` }}              >               {value}              </div>            </div>          </div>        ))}      </div>    </div>  );};export const AdminDashboard: React.FC<AdminDashboardProps> = ({ onExit }) => {  const [data, setData] = useState<AdminAnalyticsData | null>(null);  const [isLoading, setIsLoading] = useState(true);  useEffect(() => {    const fetchData = async () => {      setIsLoading(true);      const analyticsData = await dbService.getAdminAnalytics();      setData(analyticsData);      setIsLoading(false);    };    fetchData();  }, []);  if (isLoading || !data) {    return (      <div className="min-h-screen flex flex-col items-center justify-center bg-[rgb(var(--color-bg-secondary-rgb))]">        <LoadingSpinner size="lg" />        <p className="mt-4 text-[rgb(var(--color-text-secondary-rgb))]">Loading Admin Analytics...</p>      </div>    );  }  const personaChartData = data.personaDistribution.map(p => ({ label: p.persona, value: p.count }));  const courseChartData = data.coursePopularity.map(c => ({ label: c.course, value: c.count }));  return (    <div className="min-h-screen bg-gradient-to-b from-[rgb(var(--color-bg-gradient-from-rgb))] to-[rgb(var(--color-bg-gradient-to-rgb))] p-4 sm:p-6">      <div className="max-w-7xl mx-auto">        <div className="flex justify-between items-center mb-6">          <div className="flex items-center space-x-3">            <Icons.LogoIcon className="w-8 h-8 text-[rgb(var(--color-icon-logo-rgb))]" />            <h1 className="text-2xl sm:text-3xl font-bold text-[rgb(var(--color-text-primary-rgb))]">Admin Dashboard</h1>          </div>          <button            onClick={onExit}            className="flex items-center bg-[rgb(var(--color-accent-primary-rgb))] hover:bg-[rgb(var(--color-accent-primary-hover-rgb))] text-[rgb(var(--color-text-on-accent-rgb))] font-semibold py-2 px-4 rounded-md transition-colors"          >             <Icons.LogoutIcon className="w-5 h-5 mr-2" />            Exit Dashboard          </button>        </div>        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">          <StatCard title="Total Users" value={data.totalUsers} icon={<Icons.UserIcon className="w-6 h-6 text-[rgb(var(--color-accent-primary-rgb))]" />} />          <StatCard title="Avg. Points" value={data.avgPoints} icon={<Icons.StarIcon className="w-6 h-6 text-[rgb(var(--color-accent-primary-rgb))]" />} />          <StatCard title="Concepts Completed" value={data.totalConceptsCompleted} icon={<Icons.CheckCircleIcon className="w-6 h-6 text-[rgb(var(--color-accent-primary-rgb))]" />} />          <StatCard title="Courses" value={data.coursePopularity.length} icon={<Icons.MapIcon className="w-6 h-6 text-[rgb(var(--color-accent-primary-rgb))]" />} />        </div>        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">          <BarChart title="Persona Distribution" data={personaChartData} />          <BarChart title="Course Popularity" data={courseChartData} />        </div>      </div>    </div>  );};Use code with caution.TypeScript2. File: src/components/CodeInput.tsxGenerated typescriptimport React from 'react';import { LoadingSpinner } from './LoadingSpinner';import type { UserPersona } from '../types';interface CodeInputProps {  code: string;  setCode: (code: string) => void;  onSubmit: () => void;  isLoading: boolean;  placeholder?: string;  persona: UserPersona | null;}export const CodeInput: React.FC<CodeInputProps> = ({ code, setCode, onSubmit, isLoading, placeholder, persona }) => {  const buttonText = persona === 'kid' ? "Send to Coach!" : "Submit for Feedback";  return (    <div className="space-y-4">      <textarea        value={code}        onChange={(e) => setCode(e.target.value)}        placeholder={placeholder || "Type your thoughts here..."}        className="w-full h-40 p-3 bg-[rgb(var(--color-bg-tertiary-rgb))] text-[rgb(var(--color-text-primary-rgb))] border border-[rgb(var(--color-border-primary-rgb))] rounded-md focus:ring-2 focus:ring-[rgb(var(--color-accent-secondary-rgb))] focus:border-[rgb(var(--color-accent-secondary-rgb))] transition-colors duration-150 text-sm resize-none"        disabled={isLoading}      />      <button        onClick={onSubmit}        disabled={isLoading || !code}        className="w-full flex items-center justify-center bg-[rgb(var(--color-accent-secondary-rgb))] hover:bg-[rgb(var(--color-accent-secondary-hover-rgb))] text-[rgb(var(--color-text-on-accent-rgb))] font-semibold py-2.5 px-4 rounded-md transition-colors duration-150 disabled:opacity-50 disabled:cursor-not-allowed shadow-md hover:shadow-teal-500/30 focus:outline-none focus:ring-2 focus:ring-[rgb(var(--color-accent-secondary-rgb))] focus:ring-opacity-75"      >        {isLoading ? (          <>            <LoadingSpinner size="sm" />            <span className="ml-2">Analyzing...</span>          </>        ) : (          buttonText        )}      </button>    </div>  );};Use code with caution.TypeScript3. File: src/components/ConceptDisplay.tsxGenerated typescriptimport React from 'react';import { LoadingSpinner } from './LoadingSpinner';import { WelcomeAnimation } from '../WelcomeAnimation';import type { UserPersona } from '../types';interface ConceptDisplayProps {  explanation: string;  isLoading: boolean;  icon: React.ReactNode;  isWelcomeStep?: boolean;  persona: UserPersona | null;}export const ConceptDisplay: React.FC<ConceptDisplayProps> = ({ explanation, isLoading, icon, isWelcomeStep, persona }) => {  const loadingText = "Loading the next concept...";  const refreshText = "Refreshing concept details...";  const exploreText = persona === 'kid' ? "Let's Learn!" : "Exploring the Concept";  if (isLoading && !explanation) {     return (      <div className="flex flex-col items-center justify-center h-48 bg-[rgba(var(--color-bg-tertiary-alpha-rgb),0.5)] rounded-lg p-4">        <LoadingSpinner />        <p className="mt-2 text-[rgb(var(--color-text-secondary-rgb))]">{loadingText}</p>      </div>    );  }  return (    <div className="bg-[rgba(var(--color-bg-tertiary-alpha-rgb),0.3)] p-5 rounded-lg min-h-[12rem]">      {isWelcomeStep && persona === 'kid' && <WelcomeAnimation />}            <div className={`flex items-start text-lg font-semibold text-[rgb(var(--color-icon-lightbulb-rgb))] mb-3 ${isWelcomeStep ? 'mt-4' : ''}`}>        <span className="flex-shrink-0 mr-2">{icon}</span>        <h3>{exploreText}</h3>      </div>      {isLoading && explanation && (          <div className="flex items-center text-sm text-[rgb(var(--color-text-secondary-rgb))] mb-2">           <LoadingSpinner size="sm" />           <p className="ml-2">{refreshText}</p>         </div>      )}      <div className="prose prose-sm prose-invert max-w-none text-[rgb(var(--color-text-tertiary-rgb))]">        {explanation.split('\n').map((paragraph, index) => (          <p key={index}>{paragraph}</p>        ))}      </div>    </div>  );};Use code with caution.TypeScript4. File: src/components/CourseOutlineModal.tsxGenerated typescriptimport React, { useState, useMemo } from 'react';import type { LearningStep, UserPersona, Theme, Badge } from '../types';import { BADGES_CONFIG } from '../constants';import * as Icons from './icons';interface CourseOutlineModalProps {  isOpen: boolean;  onClose: () => void;  learningPath: LearningStep[];  currentLevelIndex: number;  onNavigateToLevel: (index: number) => void;  persona: UserPersona;  theme: Theme;  achievedBadgeIds: string[];  totalPoints: number;}const formatTime = (totalMinutes: number): string => {  if (totalMinutes < 1) return "<1 minute";  const hours = Math.floor(totalMinutes / 60);  const minutes = totalMinutes % 60;  let result = '';  if (hours > 0) {    result += `${hours} hour${hours > 1 ? 's' : ''}`;  }  if (minutes > 0) {    if (hours > 0) result += ' ';    result += `${minutes} minute${minutes > 1 ? 's' : ''}`;  }  return result || "0 minutes";};export const CourseOutlineModal: React.FC<CourseOutlineModalProps> = ({  isOpen,  onClose,  learningPath,  currentLevelIndex,  onNavigateToLevel,  persona,  theme,  achievedBadgeIds,  totalPoints,}) => {  const [conceptsPerDay, setConceptsPerDay] = useState<number>(1);  const [activeTab, setActiveTab] = useState<'path' | 'badges'>('path');  const totalCourseTimeMinutes = useMemo(() =>     learningPath.reduce((sum, step) => sum + step.estimatedTimeMinutes, 0)  , [learningPath]);  const timeSpentMinutes = useMemo(() =>    learningPath.slice(0, currentLevelIndex).reduce((sum, step) => sum + step.estimatedTimeMinutes, 0)  , [learningPath, currentLevelIndex]);    const timeRemainingMinutes = totalCourseTimeMinutes - timeSpentMinutes;    const estimatedDaysRemaining = useMemo(() => {    if (!conceptsPerDay || conceptsPerDay <= 0) return Infinity;    const remainingStepsCount = learningPath.length - currentLevelIndex;    if (remainingStepsCount <= 0) return 0;    return Math.ceil(remainingStepsCount / conceptsPerDay);  }, [learningPath, currentLevelIndex, conceptsPerDay]);  const modalTitle = "Your Learning Path Overview";  const conceptNoun = "Concept";  const conceptNounPlural = "Concepts";  if (!isOpen) return null;  return (    <div className="fixed inset-0 bg-[rgba(var(--color-bg-secondary-rgb),0.7)] backdrop-blur-md flex items-center justify-center p-4 z-50 transition-opacity duration-300 ease-in-out" onClick={onClose}>      <div         className="bg-[rgb(var(--color-bg-primary-rgb))] p-5 sm:p-6 rounded-xl shadow-2xl w-full max-w-3xl max-h-[90vh] flex flex-col border border-[rgb(var(--color-border-primary-rgb))]"        onClick={(e) => e.stopPropagation()}      >        <div className="flex justify-between items-center mb-4">          <h2 className="text-xl sm:text-2xl font-bold text-[rgb(var(--color-text-accent-rgb))]">{modalTitle}</h2>          <button onClick={onClose} className="text-[rgb(var(--color-text-secondary-rgb))] hover:text-[rgb(var(--color-text-primary-rgb))] transition-colors">            <Icons.XMarkIcon className="w-7 h-7" />          </button>        </div>        {/* Tabs */}        <div className="flex border-b border-[rgb(var(--color-border-primary-rgb))] mb-4">          <button             onClick={() => setActiveTab('path')}            className={`py-2 px-4 font-medium transition-colors ${activeTab === 'path' ? 'text-[rgb(var(--color-text-accent-rgb))] border-b-2 border-[rgb(var(--color-accent-primary-rgb))]' : 'text-[rgb(var(--color-text-secondary-rgb))] hover:text-[rgb(var(--color-text-primary-rgb))]'}`}          >            Learning Path          </button>          <button             onClick={() => setActiveTab('badges')}            className={`py-2 px-4 font-medium transition-colors ${activeTab === 'badges' ? 'text-[rgb(var(--color-text-accent-rgb))] border-b-2 border-[rgb(var(--color-accent-primary-rgb))]' : 'text-[rgb(var(--color-text-secondary-rgb))] hover:text-[rgb(var(--color-text-primary-rgb))]'}`}          >            My Badges ({achievedBadgeIds.length} / {BADGES_CONFIG.length})          </button>        </div>        {activeTab === 'path' && (          <>            {/* Estimation Section */}            <div className={`mb-6 p-4 rounded-lg bg-[rgba(var(--color-bg-tertiary-alpha-rgb),0.5)] border border-[rgba(var(--color-border-primary-rgb),0.5)] text-sm`}>              <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 mb-3">                <p><strong className="text-[rgb(var(--color-text-accent-rgb))]">Total Course Time:</strong> {formatTime(totalCourseTimeMinutes)}</p>                <p><strong className="text-[rgb(var(--color-text-accent-rgb))]">Progress:</strong> {currentLevelIndex} of {learningPath.length} {conceptNounPlural} Mastered</p>                <p><strong className="text-[rgb(var(--color-text-accent-rgb))]">Time Spent:</strong> {formatTime(timeSpentMinutes)}</p>                <p><strong className="text-[rgb(var(--color-text-accent-rgb))]">Time Remaining:</strong> {formatTime(timeRemainingMinutes)}</p>                 <p><strong className="text-[rgb(var(--color-text-accent-rgb))]">Total Points:</strong> {totalPoints} ?</p>              </div>              <div className="flex flex-col sm:flex-row items-center gap-2 sm:gap-3">                <label htmlFor="conceptsPerDay" className="text-[rgb(var(--color-text-tertiary-rgb))] whitespace-nowrap">                  {conceptNounPlural} per day:                </label>                <input                  type="number"                  id="conceptsPerDay"                  min="1"                  max="10"                  value={conceptsPerDay}                  onChange={(e) => setConceptsPerDay(Math.max(1, parseInt(e.target.value) || 1))}                  className="w-20 p-1.5 bg-[rgb(var(--color-bg-secondary-rgb))] text-[rgb(var(--color-text-primary-rgb))] border border-[rgb(var(--color-border-primary-rgb))] rounded-md focus:ring-1 focus:ring-[rgb(var(--color-accent-primary-rgb))] text-center"                />                {timeRemainingMinutes > 0 && estimatedDaysRemaining !== Infinity && (                    <p className="text-[rgb(var(--color-text-tertiary-rgb))]">                        Est. <strong className="text-[rgb(var(--color-text-accent-rgb))]">{estimatedDaysRemaining}</strong> day{estimatedDaysRemaining === 1 ? '' : 's'} to complete.                    </p>                )}                {timeRemainingMinutes <= 0 && <p className="text-[rgb(var(--color-accent-success-rgb))] font-semibold">Course Complete! ??</p>}              </div>            </div>            {/* Modules List */}            <div className="overflow-y-auto space-y-2 pr-2 -mr-2 flex-grow max-h-[calc(90vh-320px)] sm:max-h-[calc(90vh-300px)]">              {learningPath.map((step, index) => {                const isCompleted = index < currentLevelIndex;                const isCurrent = index === currentLevelIndex;                const canNavigate = isCompleted || isCurrent;                let statusIcon;                let titleColorClass = "text-[rgb(var(--color-text-primary-rgb))]";                let borderColorClass = "border-[rgb(var(--color-border-primary-rgb))]";                if (isCompleted) {                  statusIcon = <Icons.CheckCircleIcon className="w-5 h-5 sm:w-6 sm:h-6 text-[rgb(var(--color-accent-success-rgb))]" isFilled />;                  titleColorClass = "text-[rgb(var(--color-text-secondary-rgb))] line-through";                  borderColorClass = "border-[rgb(var(--color-accent-success-rgb))] opacity-70";                } else if (isCurrent) {                  statusIcon = <Icons.PlayCircleIcon className="w-5 h-5 sm:w-6 sm:h-6 text-[rgb(var(--color-accent-primary-rgb))]" />;                  titleColorClass = "text-[rgb(var(--color-text-accent-rgb))] font-semibold";                  borderColorClass = "border-[rgb(var(--color-accent-primary-rgb))] shadow-lg";                } else {                  statusIcon = <Icons.LockClosedIcon className="w-5 h-5 sm:w-6 sm:h-6 text-[rgb(var(--color-text-secondary-rgb))] opacity-50" />;                  titleColorClass = "text-[rgb(var(--color-text-secondary-rgb))] opacity-70";                  borderColorClass = "border-[rgb(var(--color-border-primary-rgb))] opacity-50";                }                return (                  <button                    key={step.id}                    onClick={() => canNavigate && onNavigateToLevel(index)}                    disabled={!canNavigate}                    className={`w-full flex items-center p-3 sm:p-4 rounded-lg border ${borderColorClass} bg-[rgba(var(--color-bg-tertiary-alpha-rgb),0.2)] hover:bg-[rgba(var(--color-bg-tertiary-alpha-rgb),0.4)] transition-all duration-150 ${canNavigate ? 'cursor-pointer' : 'cursor-not-allowed'}`}                    aria-label={`Go to ${step.blockType || step.title}`}                  >                    <div className="mr-3">{statusIcon}</div>                    <div className="flex-grow text-left">                      <h4 className={`text-sm sm:text-base font-medium ${titleColorClass}`}>                        {step.emoji} {step.blockType || step.title}                      </h4>                      <p className={`text-xs ${isCompleted ? 'text-[rgb(var(--color-text-secondary-rgb))] opacity-80' : 'text-[rgb(var(--color-text-tertiary-rgb))]'}`}>                        Est. {formatTime(step.estimatedTimeMinutes)}                        {step.points > 0 && <span className="ml-2 text-[rgb(var(--color-accent-tertiary-rgb))]">+{step.points} pts</span>}                      </p>                    </div>                    {isCurrent && <Icons.ArrowRightIcon className="w-5 h-5 text-[rgb(var(--color-accent-primary-rgb))] ml-2" />}                  </button>                );              })}            </div>          </>        )}        {activeTab === 'badges' && (          <div className="overflow-y-auto space-y-3 pr-2 -mr-2 flex-grow max-h-[calc(90vh-150px)] sm:max-h-[calc(90vh-120px)]">            {BADGES_CONFIG.map((badge) => {              const isAchieved = achievedBadgeIds.includes(badge.id);              const IconComponent = Icons[badge.iconName] as React.FC<React.SVGProps<SVGSVGElement>>;                            return (                <div                   key={badge.id}                  className={`flex items-center p-3 sm:p-4 rounded-lg border bg-[rgba(var(--color-bg-tertiary-alpha-rgb),0.2)] transition-all duration-150 ${isAchieved ? 'border-[rgb(var(--color-accent-tertiary-rgb))] shadow-md' : 'border-[rgb(var(--color-border-primary-rgb))] opacity-60'}`}                >                  <IconComponent                     className={`w-10 h-10 sm:w-12 sm:h-12 mr-3 sm:mr-4 flex-shrink-0 ${isAchieved ? 'text-[rgb(var(--color-accent-tertiary-rgb))]' : 'text-[rgb(var(--color-text-secondary-rgb))]'}`}                   />                  <div className="flex-grow">                    <h4 className={`text-base sm:text-lg font-semibold ${isAchieved ? 'text-[rgb(var(--color-text-accent-rgb))]' : 'text-[rgb(var(--color-text-primary-rgb))]'}`}>                      {badge.name}                    </h4>                    <p className={`text-xs sm:text-sm ${isAchieved ? 'text-[rgb(var(--color-text-tertiary-rgb))]' : 'text-[rgb(var(--color-text-secondary-rgb))]'}`}>                      {badge.description}                    </p>                  </div>                  {isAchieved && <Icons.CheckCircleIcon className="w-6 h-6 sm:w-7 sm:h-7 text-[rgb(var(--color-accent-success-rgb))]" isFilled />}                </div>              );            })}          </div>        )}      </div>    </div>  );};Use code with caution.TypeScript1. File: src/components/FeedbackDisplay.tsxGenerated typescriptimport React from 'react';import { LoadingSpinner } from './LoadingSpinner';import type { UserPersona } from '../types';interface FeedbackDisplayProps {  feedback: string;  isLoading: boolean;  persona: UserPersona | null;}export const FeedbackDisplay: React.FC<FeedbackDisplayProps> = ({ feedback, isLoading, persona }) => {  const waitingText = persona === 'kid'     ? "It's your turn! Type your answer above and send it to your robot coach! ??"    : "Awaiting your input. Describe your reasoning in the area above and submit for feedback.";    const loadingText = persona === 'kid'     ? "Coach is thinking... ??"     : persona === 'doctor'    ? "Consulting specialist..."    : "Analyzing feedback...";  if (isLoading) {    return (      <div className="flex flex-col items-center justify-center h-48 bg-[rgba(var(--color-bg-tertiary-alpha-rgb),0.5)] rounded-lg p-4">        <LoadingSpinner />        <p className="mt-2 text-[rgb(var(--color-text-secondary-rgb))]">{loadingText}</p>      </div>    );  }  if (!feedback && !isLoading) {    return <p className="text-[rgb(var(--color-text-secondary-rgb))] text-sm italic text-center py-10">{waitingText}</p>;  }  return (     <div className="bg-[rgba(var(--color-bg-tertiary-alpha-rgb),0.3)] p-5 rounded-lg min-h-[12rem]">      <div className="prose prose-sm prose-invert max-w-none text-[rgb(var(--color-text-tertiary-rgb))]">        {feedback.split('\n').map((paragraph, index) => (          <p key={index}>{paragraph}</p>        ))}      </div>    </div>  );};Use code with caution.TypeScript2. File: src/components/Header.tsxGenerated typescriptimport React from 'react';import { LogoIcon, MapIcon, AwardIcon, CogIcon, UserIcon } from './icons';import type { UserPersona } from '../types';interface HeaderProps {  onOpenCourseOutline: () => void;  onOpenSettings: () => void;  persona: UserPersona | null;  userName: string | null;  totalPoints: number;}export const Header: React.FC<HeaderProps> = ({ onOpenCourseOutline, onOpenSettings, persona, userName, totalPoints }) => {  const titleText = persona === 'doctor' ? "MedTech Concepts" : "Coding Coach AI";  const subTitleText = persona === 'doctor'     ? "Your guide to technology in medicine."    : "Your friendly guide to programming and software.";  return (    <header className="w-full max-w-4xl py-6 mb-6 text-center relative">       {/* Top Bar for User Info and Settings */}      <div className="absolute top-0 left-0 right-0 flex justify-between items-center text-xs px-2">        <div className="flex items-center space-x-4">          <div className="flex items-center text-[rgb(var(--color-text-secondary-rgb))]">            <UserIcon className="w-4 h-4 mr-1.5 text-[rgb(var(--color-text-accent-rgb))]" />            <span>{userName || 'Guest'}</span>          </div>          <div className="flex items-center text-[rgb(var(--color-text-secondary-rgb))]">            <AwardIcon className="w-4 h-4 mr-1.5 text-[rgb(var(--color-accent-tertiary-rgb))]" />            <span>{totalPoints} Points</span>          </div>        </div>        <div className="flex items-center space-x-2">            <button              onClick={onOpenCourseOutline}              className="flex items-center hover:bg-[rgba(var(--color-bg-tertiary-alpha-rgb),0.8)] text-[rgb(var(--color-text-secondary-rgb))] hover:text-[rgb(var(--color-text-primary-rgb))] font-medium py-1.5 px-3 rounded-md transition-colors duration-150"              aria-label="Open Learning Path"            >              <MapIcon className="w-4 h-4 mr-1.5" />              Path            </button>             <button              onClick={onOpenSettings}              className="flex items-center hover:bg-[rgba(var(--color-bg-tertiary-alpha-rgb),0.8)] text-[rgb(var(--color-text-secondary-rgb))] hover:text-[rgb(var(--color-text-primary-rgb))] font-medium py-1.5 px-3 rounded-md transition-colors duration-150"              aria-label="Open Settings"            >              <CogIcon className="w-4 h-4 mr-1.5" />              Settings            </button>        </div>      </div>            {/* Main Header Content */}      <div className="flex items-center justify-center space-x-3 mt-10">        <LogoIcon className="w-10 h-10 sm:w-12 sm:h-12 text-[rgb(var(--color-icon-logo-rgb))]" />        <h1 className="text-3xl sm:text-4xl font-bold tracking-tight bg-gradient-to-r from-[rgb(var(--color-header-gradient-from-rgb))] via-[rgb(var(--color-header-gradient-via-rgb))] to-[rgb(var(--color-header-gradient-to-rgb))] text-transparent bg-clip-text">          {titleText}        </h1>      </div>      <p className="mt-2 text-md sm:text-lg text-[rgb(var(--color-text-secondary-rgb))]">{subTitleText}</p>    </header>  );};Use code with caution.TypeScript3. File: src/components/LevelNavigator.tsxGenerated typescriptimport React from 'react';import { ArrowLeftIcon, ArrowRightIcon } from './icons';import type { UserPersona } from '../types';interface LevelNavigatorProps {  onPrevious: () => void;  onNext: () => void;  canGoPrevious: boolean;  canGoNext: boolean;  isNextDisabled?: boolean;  persona: UserPersona | null;}export const LevelNavigator: React.FC<LevelNavigatorProps> = ({ onPrevious, onNext, canGoPrevious, canGoNext, isNextDisabled, persona }) => {  const keepGoingText = persona === 'kid'     ? "Awesome job! Ready for the next one?"    : "Excellent progress. Continue to the next concept.";      const nextLevelText = persona === 'kid' ? "Next!" : "Next Concept";  const previousLevelText = persona === 'kid' ? "Back" : "Prev Concept";    return (    <div className="flex justify-between items-center mt-8 p-4 bg-[rgb(var(--color-bg-primary-rgb))] shadow-xl rounded-lg w-full max-w-4xl">      <button        onClick={onPrevious}        disabled={!canGoPrevious}        className="flex items-center bg-[rgb(var(--color-bg-tertiary-rgb))] hover:bg-[rgba(var(--color-bg-tertiary-alpha-rgb),0.8)] text-[rgb(var(--color-text-primary-rgb))] font-medium py-2 px-4 rounded-md transition-colors duration-150 disabled:opacity-50 disabled:cursor-not-allowed"      >        <ArrowLeftIcon className="w-5 h-5 mr-2" />        {previousLevelText}      </button>      <span className="text-[rgb(var(--color-text-secondary-rgb))] text-sm hidden sm:inline">{keepGoingText}</span>      <button        onClick={onNext}        disabled={isNextDisabled || !canGoNext}        className="flex items-center bg-[rgb(var(--color-accent-primary-rgb))] hover:bg-[rgb(var(--color-accent-primary-hover-rgb))] text-[rgb(var(--color-text-on-accent-rgb))] font-semibold py-2 px-4 rounded-md transition-colors duration-150 disabled:opacity-50 disabled:cursor-not-allowed shadow-md hover:shadow-sky-500/30"      >        {nextLevelText}        <ArrowRightIcon className="w-5 h-5 ml-2" />      </button>    </div>  );};Use code with caution.TypeScript4. File: src/components/LoadingSpinner.tsxGenerated typescriptimport React from 'react';interface LoadingSpinnerProps {  size?: 'sm' | 'md' | 'lg';}export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ size = 'md' }) => {  const sizeClasses = {    sm: 'w-5 h-5',    md: 'w-8 h-8',    lg: 'w-12 h-12',  };  return (    <div className={`animate-spin rounded-full ${sizeClasses[size]} border-t-2 border-b-2 border-[rgb(var(--color-accent-primary-rgb))]`}></div>  );};Use code with caution.TypeScript5. File: src/components/SettingsModal.tsxGenerated typescriptimport React from 'react';import { XMarkIcon, LogoutIcon } from './icons';interface SettingsModalProps {  isOpen: boolean;  onClose: () => void;  onLogout: () => void;}export const SettingsModal: React.FC<SettingsModalProps> = ({  isOpen,  onClose,  onLogout}) => {  if (!isOpen) return null;  return (    <div className="fixed inset-0 bg-[rgba(var(--color-bg-secondary-rgb),0.7)] backdrop-blur-md flex items-center justify-center p-4 z-50" onClick={onClose}>      <div         className="bg-[rgb(var(--color-bg-primary-rgb))] p-6 rounded-xl shadow-2xl w-full max-w-md flex flex-col border border-[rgb(var(--color-border-primary-rgb))]"        onClick={(e) => e.stopPropagation()}      >        <div className="flex justify-between items-center mb-6">          <h2 className="text-xl font-bold text-[rgb(var(--color-text-accent-rgb))]">Settings</h2>          <button onClick={onClose} className="text-[rgb(var(--color-text-secondary-rgb))] hover:text-[rgb(var(--color-text-primary-rgb))] transition-colors">            <XMarkIcon className="w-7 h-7" />          </button>        </div>                <div className="space-y-4">          <p className="text-sm text-center text-[rgb(var(--color-text-secondary-rgb))]">            Manage your session here.          </p>          <button            onClick={onLogout}            className="w-full flex items-center justify-center bg-[rgb(var(--color-accent-warning-bg-rgb))] hover:bg-[rgba(var(--color-accent-warning-bg-rgb),0.8)] text-white font-semibold py-2.5 px-4 rounded-md transition-colors duration-150 shadow-md"          >            <LogoutIcon className="w-5 h-5 mr-2" />            Log Out          </button>        </div>      </div>    </div>  );};Use code with caution.TypeScript6. File: src/components/WelcomeModal.tsxGenerated typescriptimport React, { useState } from 'react';import { UserIcon, BriefcaseIcon, GoogleIcon } from './icons';import type { UserPersona, CourseMode, AuthUser } from '../types';import { authService } from '../services/authService';import { LoadingSpinner } from './LoadingSpinner';interface WelcomeModalProps {  onOnboardingComplete: (persona: UserPersona, courseMode: CourseMode, profession?: string) => void;  authUser: AuthUser | null;}export const WelcomeModal: React.FC<WelcomeModalProps> = ({ onOnboardingComplete, authUser }) => {  const [step, setStep] = useState(0); // 0: Login, 1: Persona, 2: Course (adult) or Specialty (doctor)  const [selectedPersona, setSelectedPersona] = useState<UserPersona | null>(null);  const [specialty, setSpecialty] = useState('');  const [isLoading, setIsLoading] = useState(false);    const commonButtonClass = "font-semibold py-3 px-6 rounded-lg text-lg transition-transform duration-150 shadow-lg focus:outline-none focus:ring-2 focus:ring-opacity-75 w-full text-center disabled:opacity-50 hover:scale-105 active:scale-100";  const primaryButtonClass = `bg-[rgb(var(--color-accent-primary-rgb))] hover:bg-[rgb(var(--color-accent-primary-hover-rgb))] text-[rgb(var(--color-text-on-accent-rgb))] focus:ring-[rgb(var(--color-accent-primary-rgb))]`;  const secondaryButtonClass = `bg-[rgb(var(--color-bg-tertiary-rgb))] hover:bg-[rgba(var(--color-bg-tertiary-rgb),0.8)] text-[rgb(var(--color-text-primary-rgb))] focus:ring-[rgb(var(--color-accent-secondary-rgb))]`;  const handleLogin = async () => {    setIsLoading(true);    try {      await authService.signInWithGoogle();      // Auth listener in App.tsx will handle the state change.      // For a new user, this modal remains open, and we advance the step.      setStep(1);    } catch (error) {      console.error("Login failed", error);    } finally {      setIsLoading(false);    }  };  const handlePersonaSelect = (persona: UserPersona) => {    setSelectedPersona(persona);    if (persona === 'kid') {      onOnboardingComplete('kid', 'coding');    } else {      setStep(2); // Go to course/specialty selection    }  };  const handleCourseSelect = (mode: CourseMode) => {    if (selectedPersona === 'adult') {      onOnboardingComplete('adult', mode);    }  };    const handleDoctorSubmit = () => {    if (selectedPersona === 'doctor') {      onOnboardingComplete('doctor', 'swe', specialty.trim() || undefined);    }  };  const renderContent = () => {    // If we have an authenticated user but no progress, they must be new. Show them the persona selection.    if (authUser && step === 0) {        setStep(1);    }    switch(step) {      case 0: // Initial login prompt        return (          <>            <h2 className="text-2xl sm:text-3xl font-bold text-[rgb(var(--color-text-accent-rgb))] mb-4">Welcome to Your AI Coach!</h2>            <p className="text-[rgb(var(--color-text-tertiary-rgb))] mb-8">              Begin your personalized learning journey by signing in.            </p>            <button onClick={handleLogin} disabled={isLoading} className={`${commonButtonClass} bg-white text-gray-700 hover:bg-gray-100 focus:ring-gray-400 flex items-center justify-center`}>              {isLoading ? <LoadingSpinner size="sm" /> : <GoogleIcon className="w-6 h-6 mr-3" />}              {isLoading ? 'Signing In...' : 'Sign in with Google'}            </button>             <p className="text-xs text-[rgb(var(--color-text-secondary-rgb))] mt-4">              Click to sign in with your Google account.            </p>          </>        );      case 1: // Persona Selection        return (          <>            <h2 className="text-2xl sm:text-3xl font-bold text-[rgb(var(--color-text-accent-rgb))] mb-4">Welcome, {authUser?.name}!</h2>            <p className="text-[rgb(var(--color-text-tertiary-rgb))] mb-8">              To personalize your learning journey, please choose the option that best describes you.            </p>            <div className="space-y-4">              <button onClick={() => handlePersonaSelect('kid')} className={`${commonButtonClass} ${secondaryButtonClass} flex items-center justify-center`}>                <UserIcon className="w-6 h-6 mr-3" /> A Young Learner or Kid              </button>              <button onClick={() => handlePersonaSelect('adult')} className={`${commonButtonClass} ${secondaryButtonClass} flex items-center justify-center`}>                <UserIcon className="w-6 h-6 mr-3" /> An Adult Beginner              </button>              <button onClick={() => handlePersonaSelect('doctor')} className={`${commonButtonClass} ${secondaryButtonClass} flex items-center justify-center`}>                <BriefcaseIcon className="w-6 h-6 mr-3" /> A Healthcare Professional              </button>            </div>          </>        );      case 2: // Sub-selection for Adult or Doctor        if (selectedPersona === 'adult') {          return (            <>              <h2 className="text-2xl sm:text-3xl font-bold text-[rgb(var(--color-text-accent-rgb))] mb-4">Choose Your Path</h2>              <p className="text-[rgb(var(--color-text-tertiary-rgb))] mb-8">                What would you like to focus on?              </p>              <div className="space-y-4">                <button onClick={() => handleCourseSelect('coding')} className={`${commonButtonClass} ${primaryButtonClass}`}>                  <h3 className="font-bold">Coding Fundamentals</h3>                  <p className="text-sm font-normal opacity-90">Learn the basics of writing code with simple, fun exercises.</p>                </button>                <button onClick={() => handleCourseSelect('swe')} className={`${commonButtonClass} ${secondaryButtonClass}`}>                  <h3 className="font-bold">Software Engineering Concepts</h3>                  <p className="text-sm font-normal opacity-90">Understand how applications are built without writing code.</p>                </button>              </div>            </>          );        }        if (selectedPersona === 'doctor') {          return (             <>              <BriefcaseIcon className="w-16 h-16 text-[rgb(var(--color-accent-secondary-rgb))] mx-auto mb-6" />              <h2 className="text-2xl sm:text-3xl font-bold text-[rgb(var(--color-text-accent-rgb))] mb-4">Welcome, Doctor!</h2>              <p className="text-[rgb(var(--color-text-secondary-rgb))] text-sm mb-6">                To help make examples more relatable, what is your medical specialty? (Optional)              </p>              <input                type="text"                value={specialty}                onChange={(e) => setSpecialty(e.target.value)}                placeholder="e.g., Cardiology, Radiology"                className="w-full p-3 mb-6 bg-[rgb(var(--color-bg-tertiary-rgb))] text-[rgb(var(--color-text-primary-rgb))] border border-[rgb(var(--color-border-primary-rgb))] rounded-md"              />              <button onClick={handleDoctorSubmit} className={`${commonButtonClass} ${primaryButtonClass}`}>                Begin Learning              </button>            </>          );        }        return null;      default:        return null;    }  };  return (    <div className="fixed inset-0 bg-[rgba(var(--color-bg-secondary-rgb),0.8)] backdrop-blur-sm flex items-center justify-center p-4 z-50">      <div className="bg-[rgb(var(--color-bg-primary-rgb))] p-6 sm:p-8 rounded-xl shadow-2xl max-w-lg w-full text-center border border-[rgb(var(--color-border-primary-rgb))]">        {renderContent()}      </div>    </div>  );};Use code with caution.TypeScript7. File: src/components/icons.tsxGenerated typescriptimport React from 'react';export const LogoIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M6.75 7.5l3 2.25-3 2.25m4.5 0h3m-9 8.25h13.5A2.25 2.25 0 0021 18V6a2.25 2.25 0 00-2.25-2.25H5.25A2.25 2.25 0 003 6v12a2.25 2.25 0 002.25 2.25z" />  </svg>);export const ArrowLeftIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18" />  </svg>);export const ArrowRightIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />  </svg>);export const ThumbsUpIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M6.633 10.5c.806 0 1.533-.446 2.031-1.08a9.041 9.041 0 012.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 00-.422-4.57C11.58 0 9.507 0 7.5 2.25c-2.007 2.25-2.007 5.25 0 7.5c.002.002.002.002.002.002zM6.75 12a.75.75 0 00-.75.75v6c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-6a.75.75 0 00-.75-.75H6.75z" />    <path strokeLinecap="round" strokeLinejoin="round" d="M12.75 6.75L11.25 12h9.75L19.5 6.75M12.75 6.75A2.25 2.25 0 0115 4.5h.085a2.25 2.25 0 012.25 2.25v7.5" /> </svg>);export const LightBulbIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M12 18v-5.25m0 0a6.01 6.01 0 001.5-.189m-1.5.189a6.01 6.01 0 01-1.5-.189m3 .378A6.011 6.011 0 0112 12.75c-1.628 0-3.14.651-4.242 1.758M12 12.75c1.628 0 3.14-.651 4.242-1.758m0 0a6.002 6.002 0 00-4.242-4.242m4.242 4.242a6.002 6.002 0 014.242 4.242M4.5 15.75A6.011 6.011 0 017.758 12c1.628 0 3.14.651 4.242 1.758m0 0V6.105a3.375 3.375 0 00-3.375-3.375H9.375a3.375 3.375 0 00-3.375 3.375v6.645" />    <path strokeLinecap="round" strokeLinejoin="round" d="M12 21a.75.75 0 01-.75-.75V18a.75.75 0 011.5 0v2.25A.75.75 0 0112 21z" />    <path strokeLinecap="round" strokeLinejoin="round" d="M9 21a.75.75 0 01-.75-.75V18a.75.75 0 011.5 0v2.25A.75.75 0 019 21z" />    <path strokeLinecap="round" strokeLinejoin="round" d="M15 21a.75.75 0 01-.75-.75V18a.75.75 0 011.5 0v2.25A.75.75 0 0115 21z" />  </svg>);export const SparklesIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L1.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.25 7.5l.813 2.846a4.5 4.5 0 012.094 2.094L24 12l-2.846.813a4.5 4.5 0 01-2.094 2.094L18.25 18.75l-.813-2.846a4.5 4.5 0 01-2.094-2.094L12.5 12l2.846-.813a4.5 4.5 0 012.094-2.094L18.25 7.5z" />  </svg>);export const CheckCircleIcon: React.FC<React.SVGProps<SVGSVGElement> & {isFilled?: boolean}> = ({isFilled, ...props}) => (  <svg fill={isFilled ? "currentColor" : "none"} viewBox="0 0 24 24" strokeWidth={1.5} stroke={isFilled ? "rgb(var(--color-bg-primary-rgb))" : "currentColor"} {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />  </svg>);export const UserIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A18.733 18.733 0 0112 22.5c-2.786 0-5.433-.608-7.499-1.682z" />  </svg>);export const BriefcaseIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M20.25 14.15v4.073a2.25 2.25 0 01-2.25 2.25h-10.5a2.25 2.25 0 01-2.25-2.25V14.15M16.5 18.75h.008v.008h-.008v-.008zm-3 0h.008v.008h-.008v-.008zm-3 0h.008v.008h-.008v-.008zm-3 0h.008v.008h-.008v-.008zM12 9.75L14.25 12m0 0l2.25 2.25M14.25 12l2.25-2.25M14.25 12L12 14.25m-2.58 4.92l-6.375-6.375a1.125 1.125 0 010-1.59L9.42 4.83c.211-.211.498-.33.796-.33H19.5a2.25 2.25 0 012.25 2.25v10.5a2.25 2.25 0 01-2.25 2.25h-9.284c-.298 0-.585-.119-.796-.33z" />  </svg>);export const MapIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M9 6.75V15m0 0v2.25m0-2.25h1.5m-1.5 0H7.5M15 10.5a3 3 0 11-6 0 3 3 0 016 0z" />    <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z" />  </svg>);export const PlayCircleIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="currentColor" viewBox="0 0 24 24" {...props}>    <path fillRule="evenodd" d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm14.024-.983a1.125 1.125 0 010 1.966l-5.625 3.125A1.125 1.125 0 019 15.125V8.875c0-.87.988-1.406 1.65-.898l5.625 3.124z" clipRule="evenodd" />  </svg>);export const LockClosedIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M16.5 10.5V6.75a4.5 4.5 0 10-9 0v3.75m-.75 11.25h10.5a2.25 2.25 0 002.25-2.25v-6.75a2.25 2.25 0 00-2.25-2.25H6.75a2.25 2.25 0 00-2.25 2.25v6.75a2.25 2.25 0 002.25 2.25z" />  </svg>);export const XMarkIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />  </svg>);export const StarIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="currentColor" viewBox="0 0 24 24" {...props}>    <path fillRule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354l-4.594 2.87c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clipRule="evenodd" />  </svg>);export const MedalIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="currentColor" viewBox="0 0 24 24" {...props}>    <path fillRule="evenodd" d="M12.75 2.25A.75.75 0 0012 3v1.655A3.004 3.004 0 009.284 3.65L7.94 4.516a.75.75 0 10.72 1.33L9.82 5.22A3 3 0 0012 6.75a3 3 0 002.18-.53l1.16-.626a.75.75 0 00-.72-1.33L13.47 4.88c-.62.332-1.31.503-2.032.503a2.982 2.982 0 00-2.032-.502V3a.75.75 0 00.75-.75zm0 0A.75.75 0 0012 1.5h-.017a.75.75 0 00-.733.75V3a.75.75 0 00.75.75h.017A.75.75 0 0012.75 3V2.25z" clipRule="evenodd" />    <path fillRule="evenodd" d="M12 21a8.25 8.25 0 100-16.5 8.25 8.25 0 000 16.5zm0-2.25a6 6 0 100-12 6 6 0 000 12zM10.06 15.94a.75.75 0 10-1.06-1.06L7.5 16.38V12a.75.75 0 00-1.5 0v4.5a.75.75 0 001.125.67L10.06 15.94zm4.94-1.06a.75.75 0 00-1.06 1.06L16.5 16.38V12a.75.75 0 00-1.5 0v4.5a.75.75 0 001.125.67L14.94 15.94z" clipRule="evenodd" />  </svg>);export const BrainIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M9.53 16.122a3 3 0 00-5.78 1.128 2.25 2.25 0 01-2.4 2.245 4.5 4.5 0 008.4-2.245c0-.399-.078-.78-.22-1.128zm0 0a15.998 15.998 0 003.388-1.62m-5.043-.025a15.994 15.994 0 011.622-3.39m3.421 1.756a15.975 15.975 0 001.739-4.83m0 0a15.975 15.975 0 00-4.83-1.739m4.83 1.739a15.965 15.965 0 00-3.388-1.619m0 0a15.97 15.97 0 00-1.622-3.39m3.746 1.765a15.96 15.96 0 00-3.389-1.618m0 0A15.998 15.998 0 005.83 6.37m0 0a15.96 15.96 0 00-1.74 4.83m0 0a15.998 15.998 0 001.622 3.389m0 0a15.998 15.998 0 003.388 1.621m0 0a15.97 15.97 0 001.739 4.83m0 0a15.965 15.965 0 004.83 1.739m0 0a15.998 15.998 0 003.388-1.621m0 0a15.96 15.96 0 001.74-4.83m0 0a15.998 15.998 0 00-1.622-3.389m-3.421 1.756a15.975 15.975 0 00-1.739-4.83m0 0a15.975 15.975 0 00-4.83-1.739M9.17 11.122a3.75 3.75 0 100-7.5 3.75 3.75 0 000 7.5z" />  </svg>);export const TargetIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M15.362 5.214A8.252 8.252 0 0112 21 8.25 8.25 0 016.038 7.048 8.287 8.287 0 009 9.6c.01.01.02.019.03.029a1.73 1.73 0 012.94-.908c-.097-.182-.222-.35-.371-.517C10.744 7.243 10.377 7 10 7c-.377 0-.744.243-.98.608M15.362 5.214A8.252 8.252 0 0112 21M12 21a8.25 8.25 0 01-5.962-13.952M15.362 5.214C14.062 6.46 12.522 7.5 10.75 7.5c-1.602 0-3.051-.694-4.138-1.74M15 12a3 3 0 11-6 0 3 3 0 016 0z" />  </svg>);export const TrophyIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="currentColor" viewBox="0 0 24 24" {...props}>    <path fillRule="evenodd" d="M5.166 2.452a.75.75 0 01.017 1.06l-1.628 1.83A3.003 3.003 0 005.101 8.056a.75.75 0 01-1.006 1.118 4.502 4.502 0 01-1.12-4.048.75.75 0 01.328-.392L4.105 2.47a.75.75 0 011.06.017zM18.834 2.452a.75.75 0 00-.017 1.06l1.628 1.83A3.003 3.003 0 0118.899 8.056a.75.75 0 101.006 1.118 4.502 4.502 0 001.12-4.048.75.75 0 00-.328-.392L19.895 2.47a.75.75 0 00-1.06.017z" clipRule="evenodd" />    <path fillRule="evenodd" d="M9.75 12.75a.75.75 0 00-1.5 0v5.25H6a.75.75 0 000 1.5h12a.75.75 0 000-1.5h-2.25v-5.25a.75.75 0 00-1.5 0v4.5h-3V12.75zM12 1.5a4.5 4.5 0 00-4.5 4.5v1.5a.75.75 0 00.75.75h7.5a.75.75 0 00.75-.75V6a4.5 4.5 0 00-4.5-4.5zM10.5 6a1.5 1.5 0 113 0V7.5h-3V6z" clipRule="evenodd" />  </svg>);export const AwardIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => ( // Generic "Award/Points" Icon  <svg fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M16.5 18.75h-9m9 0a3 3 0 013 3h-15a3 3 0 013-3m9 0v-4.5A3.375 3.375 0 0012.375 7.5H11.625A3.375 3.375 0 008.25 10.875v4.5m0 3.75V21m6-3.75V21m0-3.75H15m-6 3.75H9" />    <path strokeLinecap="round" strokeLinejoin="round" d="M12 11.25a1.125 1.125 0 100-2.25 1.125 1.125 0 000 2.25z" />  </svg>);export const GoogleIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg viewBox="0 0 48 48" {...props}>    <path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12s5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24s8.955,20,20,20s20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"></path>    <path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"></path>    <path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.223,0-9.641-3.657-11.303-8H6.306C9.663,35.663,16.318,44,24,44z"></path>    <path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.574l6.19,5.238C39.99,34.552,44,29.865,44,24C44,22.659,43.862,21.35,43.611,20.083z"></path>  </svg>);export const KeyIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1121.75 8.25z" />  </svg>);export const CogIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M4.5 12a7.5 7.5 0 0015 0m-15 0a7.5 7.5 0 1115 0m-15 0H3m18 0h-1.5m-15 0a7.5 7.5 0 1115 0m-15 0H3m18 0h-1.5m-15 0a7.5 7.5 0 0015 0m-15 0a7.5 7.5 0 1115 0m-15 0H3m18 0h-1.5m-15 0a7.5 7.5 0 1115 0m-15 0H3m18 0h-1.5" />    <path strokeLinecap="round" strokeLinejoin="round" d="M12 8.25v.75m0 6v.75m0-3.75v.75m3.75-3v.75m-7.5 0v.75m4.5 3.75v.75m-3-7.5v.75" />  </svg>);export const ArrowPathIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0011.664 0l3.181-3.183m-4.991-2.69a8.25 8.25 0 01-11.664 0l-3.181 3.183" />  </svg>);export const LogoutIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 9V5.25A2.25 2.25 0 0013.5 3h-6a2.25 2.25 0 00-2.25 2.25v13.5A2.25 2.25 0 007.5 21h6a2.25 2.25 0 002.25-2.25V15M12 9l-3 3m0 0l3 3m-3-3h12.75" />  </svg>);export const EyeIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.432 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z" />    <path strokeLinecap="round" strokeLinejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />  </svg>);export const EyeSlashIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (  <svg fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>    <path strokeLinecap="round" strokeLinejoin="round" d="M3.98 8.223A10.477 10.477 0 001.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.45 10.45 0 0112 4.5c4.756 0 8.773 3.162 10.065 7.498a10.522 10.522 0 01-4.293 5.774M6.228 6.228L3 3m3.228 3.228l3.65 3.65m7.894 7.894L21 21m-3.228-3.228l-3.65-3.65m0 0a3 3 0 10-4.243-4.243m4.243 4.243l-4.243-4.243" />  </svg>);Use code with caution.TypeScript1. File: src/services/authService.tsGenerated typescriptimport {  signInWithPopup,  GoogleAuthProvider,  signOut,  onAuthStateChanged,  User as FirebaseUser,} from 'firebase/auth';import { auth } from '../firebaseConfig'; // Import the initialized auth instanceimport type { AuthUser } from '../types';// For demonstration, this email will be granted admin privilegesconst ADMIN_EMAIL = "admin@coacha.ai";const provider = new GoogleAuthProvider();// --- Service Definition ---export const authService = {  /**   * Triggers the Google Sign-In popup flow.   */  signInWithGoogle: async (): Promise<FirebaseUser> => {    const result = await signInWithPopup(auth, provider);    if (!result.user) {      throw new Error("Sign in failed, no user returned.");    }    return result.user;  },    /**   * Signs the current user out.   */  signOut: async (): Promise<void> => {    return signOut(auth);  },  /**   * A listener that reports changes in authentication state.   * It maps the Firebase User object to our app's AuthUser type.   */  onAuthStateChanged: (callback: (user: AuthUser | null) => void): (() => void) => {    return onAuthStateChanged(auth, (firebaseUser: FirebaseUser | null) => {      if (firebaseUser) {        const appUser: AuthUser = {          uid: firebaseUser.uid,          name: firebaseUser.displayName || 'Anonymous',          email: firebaseUser.email || '',          isAdmin: firebaseUser.email === ADMIN_EMAIL,        };        callback(appUser);      } else {        callback(null);      }    });  }};Use code with caution.TypeScript2. File: src/services/dbService.tsGenerated typescriptimport {  doc,  getDoc,  setDoc,  deleteDoc,  collection,  getDocs,} from 'firebase/firestore';import { db } from '../firebaseConfig'; // Import the initialized db instanceimport type { GameProgress, AdminAnalyticsData } from "../types";const USERS_COLLECTION = 'users';export const dbService = {  /**   * Fetches a user's progress from Firestore.   * @param uid - The user's unique ID from Firebase Auth.   * @returns The user's saved progress, or null if they are a new user.   */  getUserProgress: async (uid: string): Promise<GameProgress | null> => {    const docRef = doc(db, USERS_COLLECTION, uid);    const docSnap = await getDoc(docRef);    if (docSnap.exists()) {      return docSnap.data() as GameProgress;    } else {      console.log("No such document! User is new.");      return null;    }  },  /**   * Saves or updates a user's progress in Firestore.   * @param uid - The user's unique ID.   * @param progress - The user's progress data to save.   */  saveUserProgress: async (uid: string, progress: GameProgress): Promise<void> => {    const docRef = doc(db, USERS_COLLECTION, uid);    await setDoc(docRef, progress, { merge: true });   },  /**   * Clears a user's data from Firestore.   * @param uid - The user's unique ID.   */  clearUserProgress: async(uid: string): Promise<void> => {    const docRef = doc(db, USERS_COLLECTION, uid);    await deleteDoc(docRef);  },  /**   * Fetches and aggregates analytics data from all users in Firestore.   */  getAdminAnalytics: async(): Promise<AdminAnalyticsData> => {    const usersCollectionRef = collection(db, USERS_COLLECTION);    const querySnapshot = await getDocs(usersCollectionRef);    const allProgress: GameProgress[] = [];    querySnapshot.forEach((doc) => {      allProgress.push(doc.data() as GameProgress);    });    if (allProgress.length === 0) {      return {        totalUsers: 0,        avgPoints: 0,        personaDistribution: [],        coursePopularity: [],        totalConceptsCompleted: 0,      };    }        const totalUsers = allProgress.length;    const totalPointsSum = allProgress.reduce((sum, p) => sum + p.totalPoints, 0);    const avgPoints = Math.round(totalPointsSum / totalUsers);        const totalConceptsCompleted = allProgress.reduce((sum, p) => sum + Object.keys(p.completedSteps).length, 0);    const personaCounts: Record<string, number> = {};    const courseCounts: Record<string, number> = {};    for (const progress of allProgress) {        if (progress.userPersona) {            const personaName = progress.userPersona.charAt(0).toUpperCase() + progress.userPersona.slice(1);            personaCounts[personaName] = (personaCounts[personaName] || 0) + 1;        }        if (progress.courseMode) {            let courseName = '';            if (progress.userPersona === 'doctor') courseName = 'MedTech Concepts';            else if (progress.courseMode === 'swe') courseName = 'SWE Concepts';            else courseName = 'Coding Fundamentals';            courseCounts[courseName] = (courseCounts[courseName] || 0) + 1;        }    }    const personaDistribution = Object.entries(personaCounts).map(([persona, count]) => ({ persona, count }));    const coursePopularity = Object.entries(courseCounts).map(([course, count]) => ({ course, count }));    return {      totalUsers,      avgPoints,      personaDistribution,      coursePopularity,      totalConceptsCompleted,    };  }};Use code with caution.TypeScript3. File: src/services/geminiService.tsGenerated typescriptimport type { UserPersona, CourseMode, GameProgress, LearningStep } from "../types";import { medicalAnalogyMap, sweAnalogyMap } from '../constants';const generateSystemInstruction = (  baseInstructionType: 'explanation' | 'evaluation',  persona: UserPersona,  courseMode: CourseMode,  blockType?: string,  profession?: string): string => {    const analogyMap = persona === 'doctor' ? medicalAnalogyMap : sweAnalogyMap;  const conceptKey = blockType || '';  const analogy = analogyMap[conceptKey] || 'a relevant real-world analogy';  // Base persona instructions  let instruction = '';  switch (persona) {    case 'kid':      instruction = `You are a fun, friendly, and super encouraging AI robot friend. Your goal is to make coding concepts easy and exciting for a child. Use simple words, lots of positive emojis (like ?, ??, ??), and playful analogies. Keep your explanations to 1-2 short, simple paragraphs.`;      break;    case 'doctor':      instruction = `You are a world-class Medical Technology Specialist and educator. Your audience is a medical doctor. Your tone is professional, respectful, and insightful, like a peer from a different specialty. You MUST use specific medical analogies to explain complex technical concepts.`;      break;    case 'adult':       if (courseMode === 'swe') {         instruction = `You are a clear, intelligent, and helpful guide for an adult learning software engineering principles. Your tone is that of a knowledgeable mentor. You use concise, effective real-world analogies (like business, construction, or city planning) to make abstract concepts tangible.`;       } else { // adult doing coding path         instruction = `You are an encouraging and clear AI coding coach for an adult beginner. Avoid overly playful language, but maintain a positive and supportive tone. Use simple, everyday analogies to explain programming concepts.`;       }      break;  }  // Task-specific instructions  if (courseMode === 'swe') {    if (baseInstructionType === 'explanation') {      instruction += `Your task is to explain the technical concept of "${conceptKey}".You MUST use and elaborate on the following specific analogy: "${conceptKey} is like ${analogy}".Explain the concept clearly and concisely. Bridge the technical function to the real-world analogue.`;       if (persona === 'doctor' && profession) {        instruction += ` The user's medical specialty is "${profession}". If natural, you can tailor an example (e.g., for a cardiologist, an API could connect an EKG to the EHR).`;      }    } else { // evaluation      instruction += `Your role is to evaluate the user's understanding of a technical concept, which they explained using the analogy: "${conceptKey} is like ${analogy}".1.  **Acknowledge their attempt:** Start with positive reinforcement (e.g., "That's an excellent correlation," or "A very insightful way to put it.").2.  **Validate Correctness:** If their application of the analogy is correct, confirm it and briefly reinforce the key takeaway.3.  **Gently Correct:** If they are slightly off, gently guide them. Do not say "you are wrong." Instead, say something like, "That's close. To be more precise, the analogy fits best when we consider..." Then, clarify the connection.4.  **Maintain the appropriate tone for the persona.**`;    }  } else {     if (baseInstructionType === 'explanation') {      instruction += `\nYour task is to explain the programming concept of "${conceptKey}". Stick to the core idea and avoid technical jargon.`;    } else { // evaluation      instruction += `Your role is to evaluate the user's code or answer.1.  **Be Positive:** Always start with encouragement.2.  **Check for Correctness:** See if their answer correctly applies the concept of "${conceptKey}".3.  **Give Simple Feedback:** If it's correct, say so and cheer them on! If it's incorrect, give a very simple, gentle hint to help them fix it. Don't give them the answer directly.`;    }  }    return instruction;};// Generic function to call our secure backendconst callGeminiBackend = async (prompt: string, systemInstruction: string): Promise<string> => {    // This path '/api/gemini' is automatically handled by Netlify during deployment    // and proxied by Vite during local development.    const response = await fetch('/api/gemini', {        method: 'POST',        headers: {            'Content-Type': 'application/json',        },        body: JSON.stringify({ prompt, systemInstruction }),    });    if (!response.ok) {        const errorData = await response.json().catch(() => ({ error: "An unknown error occurred on the server." }));        throw new Error(errorData.error || `Server responded with status ${response.status}`);    }    const data = await response.json();    return data.text;};export const explainConcept = async (  progress: GameProgress,  conceptPrompt: string,   blockType?: string,): Promise<string> => {  if (!progress.userPersona || !progress.courseMode) return "User profile not set up correctly.";    const systemInstruction = generateSystemInstruction('explanation', progress.userPersona, progress.courseMode, blockType, progress.userProfession || undefined);  return callGeminiBackend(conceptPrompt, systemInstruction);};export const evaluateCode = async (  progress: GameProgress,  currentStep: LearningStep,  userCode: string,): Promise<string> => {  if (!progress.userPersona || !progress.courseMode) return "User profile not set up correctly.";  const systemInstruction = generateSystemInstruction('evaluation', progress.userPersona, progress.courseMode, currentStep.blockType, progress.userProfession || undefined);    const fullPrompt = `${currentStep.codeEvaluationPromptPreamble} The user was given this challenge: '${currentStep.challengeDescription}'. They submitted the following: \`\`\`\n${userCode}\n\`\`\` Please review their submission based on your system instructions.`;    return callGeminiBackend(fullPrompt, systemInstruction);};Use code with caution.TypeScriptYou have now created every single file required for the codey project. The structure is complete and correct.Final Run Instructions1. Open your terminal in the codey folder.2. Run this command ONCE to install all the libraries:Generated bashnpm installUse code with caution.Bash3. For local testing, create a .env file in the codey folder. Add this line to it, pasting your key:Generated codeGEMINI_API_KEY=your_actual_gemini_api_key_hereUse code with caution.(Note: This .env file is for local use and should NOT be pushed to GitHub).4. Run this command to start the app locally (this will also run your backend function):Generated bashnpm install -g netlify-clinetlify devUse code with caution.BashThis will start your application, usually on port 8888. Open http://localhost:8888 in your browser.5. For Deployment:o Push your codey folder to a GitHub repository.o Connect the repository to Netlify.o In Netlify's site settings, go to "Environment variables" and add your GEMINI_API_KEY.